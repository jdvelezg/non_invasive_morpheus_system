{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/pages/devices-page/devices-page.component.ts","./src/app/pages/devices-page/devices-page.component.html","./src/app/pages/patients-page/patients-page.component.ts","./src/app/pages/patients-page/patients-page.component.html","./src/app/pages/recordings-page/recordings-page.component.ts","./src/app/pages/recordings-page/recordings-page.component.html","./src/app/pages/sensors-page/sensors-page.component.ts","./src/app/pages/sensors-page/sensors-page.component.html","./src/app/shared/components/bed-canvas/bed-canvas.component.ts","./src/app/shared/components/bed-canvas/bed-canvas.component.html","./src/app/shared/components/del-patient-button/del-patient-button.component.ts","./src/app/shared/components/del-patient-button/del-patient-button.component.html","./src/app/shared/components/del-sensor-button/del-sensor-button.component.ts","./src/app/shared/components/del-sensor-button/del-sensor-button.component.html","./src/app/shared/components/device-card/device-card.component.ts","./src/app/shared/components/device-card/device-card.component.html","./src/app/shared/components/edit-device-form/edit-device-form.component.ts","./src/app/shared/components/edit-device-form/edit-device-form.component.html","./src/app/shared/components/link-download-data-form/link-download-data-form.component.ts","./src/app/shared/components/link-download-data-form/link-download-data-form.component.html","./src/app/shared/components/link-patient-form/link-patient-form.component.ts","./src/app/shared/components/link-patient-form/link-patient-form.component.html","./src/app/shared/components/link-recorder-form/link-recorder-form.component.ts","./src/app/shared/components/link-recorder-form/link-recorder-form.component.html","./src/app/shared/components/link-sensor-form/link-sensor-form.component.ts","./src/app/shared/components/link-sensor-form/link-sensor-form.component.html","./src/app/shared/components/patient-data-table/patient-data-table.component.ts","./src/app/shared/components/patient-data-table/patient-data-table.component.html","./src/app/shared/components/recording-controls/recording-controls.component.ts","./src/app/shared/components/recording-controls/recording-controls.component.html","./src/app/shared/components/recordings-data-table/recordings-data-table.component.ts","./src/app/shared/components/recordings-data-table/recordings-data-table.component.html","./src/app/shared/components/sensors-data-table/sensors-data-table.component.ts","./src/app/shared/components/sensors-data-table/sensors-data-table.component.html","./src/app/shared/data/acc-sensor.ts","./src/app/shared/data/custom-sensor.ts","./src/app/shared/data/fsrsensor.ts","./src/app/shared/data/imusensor.ts","./src/app/shared/data/ptz-sensor.ts","./src/app/shared/services/backendmap.service.ts","./src/app/shared/services/global-util.service.ts","./src/app/shared/services/request.service.ts","./src/app/shared/services/rx-stomp.service.ts","./src/app/shared/services/session.service.ts","./src/environments/environment.test.ts","./src/main.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { PatientsPageComponent } from './pages/patients-page/patients-page.component';\nimport { DevicesPageComponent } from './pages/devices-page/devices-page.component';\nimport { SensorsPageComponent } from './pages/sensors-page/sensors-page.component';\nimport { RecordingsPageComponent } from './pages/recordings-page/recordings-page.component';\nimport { EditDeviceFormComponent } from './shared/components/edit-device-form/edit-device-form.component';\n\nconst routes: Routes = [\n  {path: '', redirectTo: 'patients', pathMatch: 'full'},\n  {path: 'home', component: DevicesPageComponent},\n  {path: 'patients', component: PatientsPageComponent},\n  {path: 'devices', component: DevicesPageComponent},\n  {path: 'connecteddevice', component: EditDeviceFormComponent},\n  {path: 'sensors', component: SensorsPageComponent},\n  {path: 'recordings', component: RecordingsPageComponent},\n\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\nimport { SessionService } from './shared/services/session.service';\nimport { RxStompService } from './shared/services/rx-stomp.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'morpheusbox_admin';\n\n  constructor(public _session:SessionService, private _rxStomp: RxStompService){\n\n  }\n\n  disconectDevice(event:any): void{\n    console.log(event);\n    this._session.closeSession();\n  }\n\n  getSessionDeviceUUID():string|undefined{\n    var uuid;\n    if(this._session.isSessionStarted()){\n      const dev =this._session.getSessionDeviceData();\n      uuid = dev?.uuid;\n    }\n    return uuid;\n  }\n}\n","<div class=\"mbox-header\">\n    <mat-toolbar matRipple [matRippleTrigger]=\"openner\">\n        <div #openner>\n            <button  mat-button class=\"menu-button\" aria-label=\"icon-button with image\" (click)=\"drawer.toggle()\">\n                <img src=\"assets/images/logo_300x.gif\" alt=\"Menu\"  height=\"53\" width=\"50\">\n            </button>\n        </div>\n        \n        <span style=\"margin-left: 12px;\">Admin Panel</span>\n        <span class=\"mbox-spacer\"></span>\n        <mat-progress-bar mode=\"query\" *ngIf=\"_session.sessionManager.isOnQueryObs | async\"></mat-progress-bar>\n        \n    </mat-toolbar>\n</div>\n<div class=\"mbox-main\" >\n    <!--Side nav-->\n    <mat-drawer-container class=\"sidenav-container\" autosize>\n        <mat-drawer #drawer class=\"mbox-sidenav\" mode=\"side\" opened>\n            <div> \n                <mat-list>\n                    <mat-list-item style=\"text-align: center;\"><b>Morpheus Box</b></mat-list-item>\n                    <mat-divider></mat-divider>\n                    <mat-list-item><a routerLink=\"/patients\" routerLinkActive=\"active\" ariaCurrentWhenActive=\"page\">Registered Patients</a></mat-list-item>\n                    <mat-list-item *ngIf=\"!_session.isSessionStarted()\"><a routerLink=\"/devices\" routerLinkActive=\"active\" ariaCurrentWhenActive=\"page\">Registered Devices</a></mat-list-item>\n                    <mat-list-item *ngIf=\"!_session.isSessionStarted()\"><a routerLink=\"/recordings\" routerLinkActive=\"active\" ariaCurrentWhenActive=\"page\">Recordings</a></mat-list-item>\n                    <mat-divider></mat-divider>\n                </mat-list>\n            </div>\n\n            <div> \n                <mat-list [hidden]=\"!_session.isSessionStarted()\">\n                    <mat-list-item style=\"text-align: center;\">\n                        Device <span [hidden]=\"!_session.isSessionStarted()\">Connected <mat-icon fontIcon=\"memory\" style=\"color: green;\"></mat-icon></span> \n                        <br/><span style=\"font-size: 50%;color: lightslategray;\">({{getSessionDeviceUUID()}})</span>\n                    </mat-list-item>\n                    \n                    <mat-list-item><a routerLink=\"/connecteddevice\" routerLinkActive=\"active\" ariaCurrentWhenActive=\"page\">main </a></mat-list-item>\n                    <mat-list-item><a routerLink=\"/sensors\" routerLinkActive=\"active\" ariaCurrentWhenActive=\"page\">sensors</a></mat-list-item>\n                    <mat-list-item><a routerLink=\"/recordings\" routerLinkActive=\"active\" ariaCurrentWhenActive=\"page\">recordings</a></mat-list-item>\n                    <mat-divider></mat-divider>\n                    <mat-list-item style=\"text-align: center;\"><button mat-button [disabled]=\"!_session.isSessionStarted()\" (click)=\"disconectDevice($event)\">Disconnect</button></mat-list-item>\n                </mat-list>\n            </div>\n\n        </mat-drawer>            \n        <router-outlet></router-outlet>      \n    </mat-drawer-container>\n</div>\n<!--div class=\"footer\"></div-->","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\n\nimport {MatSidenavModule} from '@angular/material/sidenav';\nimport {MatToolbarModule} from '@angular/material/toolbar'; \nimport {MatIconModule} from '@angular/material/icon'; \nimport {MatDividerModule} from '@angular/material/divider';\nimport {MatProgressBarModule} from '@angular/material/progress-bar'; \nimport {MatRadioModule} from '@angular/material/radio'; \nimport {MatCardModule} from '@angular/material/card'; \nimport {ClipboardModule} from '@angular/cdk/clipboard'; \nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner'; \nimport {MatSlideToggleModule} from '@angular/material/slide-toggle'; \nimport {MatListModule} from '@angular/material/list'; \nimport {MatTableModule} from '@angular/material/table';\nimport {MatPaginatorModule} from '@angular/material/paginator';\nimport {MatSortModule} from '@angular/material/sort'; \nimport {MatChipsModule} from '@angular/material/chips'; \nimport {MatRippleModule} from '@angular/material/core'; \nimport {MatFormFieldModule} from '@angular/material/form-field'; \nimport {MatSelectModule} from '@angular/material/select'; \nimport {MatInputModule} from '@angular/material/input'; \nimport {MatButtonModule} from '@angular/material/button'; \nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\nimport {MatCheckboxModule} from '@angular/material/checkbox'; \nimport {MatMenuModule} from '@angular/material/menu'; \nimport { NgbPopoverModule } from '@ng-bootstrap/ng-bootstrap';\n\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { PatientsPageComponent } from './pages/patients-page/patients-page.component';\nimport { DevicesPageComponent } from './pages/devices-page/devices-page.component';\nimport { PatientDataTableComponent } from './shared/components/patient-data-table/patient-data-table.component';\nimport { LinkPatientFormComponent } from './shared/components/link-patient-form/link-patient-form.component';\nimport { DelPatientButtonComponent } from './shared/components/del-patient-button/del-patient-button.component';\nimport { DeviceCardComponent } from './shared/components/device-card/device-card.component';\nimport { SensorsPageComponent } from './pages/sensors-page/sensors-page.component';\nimport { SensorsDataTableComponent } from './shared/components/sensors-data-table/sensors-data-table.component';\nimport { RecordingsDataTableComponent } from './shared/components/recordings-data-table/recordings-data-table.component';\nimport { RecordingsPageComponent } from './pages/recordings-page/recordings-page.component';\nimport { BedCanvasComponent } from './shared/components/bed-canvas/bed-canvas.component';\nimport { EditDeviceFormComponent } from './shared/components/edit-device-form/edit-device-form.component';\nimport { LinkSensorFormComponent } from './shared/components/link-sensor-form/link-sensor-form.component';\nimport { DelSensorButtonComponent } from './shared/components/del-sensor-button/del-sensor-button.component';\nimport { RecordingControlsComponent } from './shared/components/recording-controls/recording-controls.component';\nimport { LinkDownloadDataFormComponent } from './shared/components/link-download-data-form/link-download-data-form.component';\nimport { LinkRecorderFormComponent } from './shared/components/link-recorder-form/link-recorder-form.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    PatientsPageComponent,\n    DevicesPageComponent,\n    PatientDataTableComponent,\n    LinkPatientFormComponent,\n    DelPatientButtonComponent,\n    DeviceCardComponent,\n    SensorsPageComponent,\n    SensorsDataTableComponent,\n    RecordingsDataTableComponent,\n    RecordingsPageComponent,\n    BedCanvasComponent,\n    EditDeviceFormComponent,\n    LinkSensorFormComponent,\n    DelSensorButtonComponent,\n    RecordingControlsComponent,\n    LinkDownloadDataFormComponent,\n    LinkRecorderFormComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    NgbModule,\n    HttpClientModule,\n    FormsModule,\n    ReactiveFormsModule,\n    BrowserAnimationsModule,\n    MatToolbarModule,\n    MatSidenavModule,\n    MatIconModule,\n    MatDividerModule,\n    MatProgressBarModule,\n    MatRadioModule,\n    MatCardModule,\n    ClipboardModule,\n    MatProgressSpinnerModule,\n    MatSlideToggleModule,\n    MatListModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatChipsModule,\n    MatRippleModule,\n    MatFormFieldModule,\n    MatSelectModule,\n    MatInputModule,\n    MatButtonModule,\n    MatTooltipModule,\n    MatSnackBarModule,\n    MatAutocompleteModule,\n    MatCheckboxModule,\n    MatMenuModule,\n    NgbPopoverModule\n  ],\n  providers: [\n    //{provide: MAT_FORM_FIELD_DEFAULT_OPTIONS, useValue: {appearance: 'outline'}}\n    //{provide: RxStompService, useFactory: rxStompServiceFactory}\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { interval } from 'rxjs';\nimport { AgentMessage } from 'src/app/shared/interfaces/agent-message';\nimport { Device } from 'src/app/shared/interfaces/device';\nimport { BackendmapService } from 'src/app/shared/services/backendmap.service';\nimport { RequestService } from 'src/app/shared/services/request.service';\nimport { SessionService } from 'src/app/shared/services/session.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { RxStompService, rxStompServiceDestroy, rxStompServiceFactory } from 'src/app/shared/services/rx-stomp.service';\n\n\n@Component({\n  selector: 'app-devices-page',\n  templateUrl: './devices-page.component.html',\n  styleUrls: ['./devices-page.component.css'],\n  providers: [{provide: RxStompService, useFactory: rxStompServiceFactory}]\n})\nexport class DevicesPageComponent implements OnInit, OnDestroy {\n\n  infoMessage: string|undefined;\n  errorMessage: string|undefined;\n  showError:boolean = false;\n  showOffline:boolean = true;\n  datacount: number = 0;\n  subscriber!: any;\n\n  DEVICE_DATA:Device[] = [];\n  dataSource!: MatTableDataSource<Device>;\n  @ViewChild(MatSort) sort!: MatSort;\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\n\n  \n\n  constructor(private _request: RequestService, private _backend:BackendmapService, private _snackBar: MatSnackBar,\n    private _session: SessionService){\n      \n    }\n\n    ngOnInit(){\n      //Query list of registered devices\n      this._request.sendBackendGet(this._backend.GET_DEVICES_LIST).subscribe({\n        next:(res) =>{\n          let response: AgentMessage = <AgentMessage>JSON.parse(res);\n          this.infoMessage =undefined;\n          this.errorMessage =undefined;\n          if(response.error){\n            this.showError = true;\n            this.errorMessage = response.message;\n            this.dataSource = new MatTableDataSource<Device>([]);\n            console.error(response.message);\n          }else{\n            this.infoMessage = response.message;\n            this.DEVICE_DATA = response.response;\n            this.dataSource = new MatTableDataSource<Device>(this.DEVICE_DATA);\n            this.datacount = this.DEVICE_DATA.length;\n            if(this.datacount!=0){\n              this.dataSource.paginator = this.paginator;\n            }\n            console.log(\"info: \"+this.infoMessage);\n          }\n        },\n        error:(err) =>{\n        console.error(\"HTTP-Error requesting patient data: \"+err);\n        },\n        complete:() =>{\n          //hide progress bar\n          this._session.setEndQuery();\n          this.setInfoSubscriber();\n        }\n      });\n    }\n\n    ngOnDestroy() :void {\n      rxStompServiceDestroy();\n    }\n\n    getPageFromDataSource(): Device[]{\n      if(this.dataSource != undefined){\n        let deviceList = this.dataSource._pageData(this.DEVICE_DATA);\n        return deviceList;\n      }\n      return [];\n    }\n\n    /**\n     * Disappear the Info header after 10 seconds\n     */\n    setInfoSubscriber() :void{\n      //vanish InfoMessage if any\n      if(this.infoMessage!==undefined){\n        const secondsCounter = interval(7*1000);\n        this.subscriber = secondsCounter.subscribe(\n          n => {\n            this.infoMessage = undefined; \n            this.subscriber.unsubscribe();\n            console.log(n+\" end subscriber\");\n          }\n        );\n      }else{\n        if(this.subscriber !== undefined){\n          this.subscriber.unsubscribe();\n        }\n      }\n    }\n\n    removeInfoMssg(){\n      this.infoMessage = undefined;\n      this.showError = false;\n    }\n    removeErrorMssg(){\n      this.errorMessage = undefined;\n      this.showError = false;\n    }\n\n    onMessageEvent(message:string): void{\n      this._snackBar.open(message, 'dismiss',{\n        duration: (7 * 1000),\n      });\n    }\n\n}\n","<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md text-center\">\n            <h4 class=\"mbox-crud-title\">\n                Devices Registered in the system <span class=\"material-icons\">memory</span>                   \n            </h4>\n        </div>\n    </div>\n    <mat-divider></mat-divider>\n    <!--Info headers-->\n    <div class=\"row\" style=\"height: 10px;\">\n        <div class=\"col\">\n            <mat-chip-listbox aria-label=\"Info messages\">\n            <!--info-->\n            <mat-chip-option \n                [hidden]=\"infoMessage==undefined\" \n                color=\"accent\" \n                (removed)=\"removeInfoMssg()\"\n                class=\"mbox-info-chip\">\n                {{infoMessage}}\n                <button matChipRemove>\n                <mat-icon>cancel</mat-icon>\n                </button>\n            </mat-chip-option>\n            <!--Error-->\n            <mat-chip-option \n                [hidden]=\"!showError\" \n                color=\"accent\" \n                (removed)=\"removeErrorMssg()\"\n                class=\"mbox-error-chip\">\n                {{errorMessage}}\n                <button matChipRemove>\n                <mat-icon>cancel</mat-icon>\n                </button>\n            </mat-chip-option>  \n            </mat-chip-listbox>\n        </div>\n    </div>\n    <!--paginator-->\n    <div class=\"row\">\n        <div class=\"col\" style=\"margin-top: 5em;\">\n            <!--filter Active-->\n            <div style=\"text-align: end; margin-right: 2em;\">\n                <mat-slide-toggle\n                    title=\"Show only online devices\"\n                    [(ngModel)]=\"showOffline\"\n                    color=\"primary\"\n                    [checked]=\"showOffline\">\n                    <mat-icon [hidden]=\"!showOffline\" aria-hidden=\"false\" aria-label=\"Delete icon\">sensors</mat-icon>\n                    <mat-icon [hidden]=\"showOffline\" aria-hidden=\"false\" aria-label=\"Delete icon\">sensors_off</mat-icon>\n                </mat-slide-toggle>\n            </div>\n            \n            <mat-paginator [pageSizeOptions]=\"[3, 5]\" showFirstLastButtons aria-label=\"Select page of Registered Devices\"></mat-paginator>\n        </div>\n    </div>\n    <!--device data-->\n    <div class=\"row\" *ngFor=\"let device of getPageFromDataSource()\" style=\"margin-top: 0.3em;\">\n        <div class=\"col\" [hidden]=\"!device.isOnline && showOffline\">\n            <!-- devices list-->\n            <app-device-card [device]=\"device\" (submitInfo)=\"onMessageEvent($event)\"></app-device-card>\n        </div>\n    </div>    \n\n</div>","import { Component } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n\n@Component({\n  selector: 'app-patients-page',\n  templateUrl: './patients-page.component.html',\n  styleUrls: ['./patients-page.component.css']\n})\nexport class PatientsPageComponent {\n\n  constructor(private _snackBar: MatSnackBar){\n    \n  }\n\n  openSnackBar(message: any) {\n    console.log(message);\n    this._snackBar.open(message, 'dismiss',{\n      duration: (7 * 1000),\n    });\n  }\n  \n}\n","<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md text-center\">\n            <h4 class=\"mbox-crud-title\">\n                Patients Registered in the system <span class=\"material-icons\">personal_injury</span>                   \n            </h4>\n        </div>\n    </div>\n    <mat-divider></mat-divider>\n    <!--Patient data-->\n    <div class=\"row\">\n        <div class=\"col\" style=\"margin-top: 5em;\">\n            <app-patient-data-table></app-patient-data-table>\n        </div>\n    </div>    \n\n</div>","import { Component } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Device } from 'src/app/shared/interfaces/device';\nimport { SessionService } from 'src/app/shared/services/session.service';\n\n@Component({\n  selector: 'app-recordings-page',\n  templateUrl: './recordings-page.component.html',\n  styleUrls: ['./recordings-page.component.css']\n})\nexport class RecordingsPageComponent {\n\n  activeDevice:Device|null;\n\n  constructor(private _snackBar: MatSnackBar, public _session: SessionService){\n    this.activeDevice = this._session.getSessionDeviceData();\n  }\n\n  openSnackBar(message: any) {\n    console.log(message);\n    this._snackBar.open(message, 'dismiss',{\n      duration: (7 * 1000),\n    });\n  }\n\n}\n","<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md text-center\">\n            <h5><span *ngIf=\"activeDevice\">({{activeDevice.name}})</span></h5>\n            <h4 class=\"mbox-crud-title\">\n                Recordings from Device <span class=\"material-icons\">local_hotel</span>                   \n            </h4>\n        </div>\n    </div>\n    <mat-divider></mat-divider>\n    <!--Patient data-->\n    <div class=\"row\">\n        <div class=\"col\" style=\"margin-top: 5em;\">\n            <app-recordings-data-table [device]=\"_session.getSessionDeviceData()\" (submitInfo)=\"openSnackBar($event)\"></app-recordings-data-table>\n        </div>\n    </div>    \n\n</div>","import { Component, OnInit } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Device } from 'src/app/shared/interfaces/device';\nimport { RxStompService, rxStompServiceFactory } from 'src/app/shared/services/rx-stomp.service';\nimport { SessionService } from 'src/app/shared/services/session.service';\n\n\n@Component({\n  selector: 'app-sensors-page',\n  templateUrl: './sensors-page.component.html',\n  styleUrls: ['./sensors-page.component.css'],\n  providers: [{provide: RxStompService, useFactory: rxStompServiceFactory}]\n})\nexport class SensorsPageComponent implements OnInit{\n\n  private currentDevice:Device|null = null;\n  activeDevice!:Device;\n  activeSession:boolean=false;\n\n  constructor(private _snackBar: MatSnackBar, public _session: SessionService){\n    this.currentDevice = this._session.getSessionDeviceData();\n    if(this.currentDevice !== null){\n      this.activeDevice = this.activeDevice;\n      this.activeSession = true;\n    }\n  }\n  ngOnInit(): void {\n    this.currentDevice = this._session.getSessionDeviceData();\n    console.log(this.currentDevice);\n    if(this.currentDevice !=null){\n      this.activeDevice = this.currentDevice;\n      console.log(\"active-set\");\n    }\n  }\n\n  openSnackBar(message: any) {\n    console.log(message);\n    this._snackBar.open(message, 'dismiss',{\n      duration: (7 * 1000),\n    });\n  }\n\n}\n","<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md text-center\">\n            <h5><span *ngIf=\"activeDevice\">({{activeDevice.name}})</span></h5>\n            <h4 class=\"mbox-crud-title\">\n                Sensors Configured in Device <span class=\"material-icons\">sensors</span>                   \n            </h4>\n        </div>\n    </div>\n    <mat-divider></mat-divider>\n    <!--Patient data-->\n    <div class=\"row\">\n        <div class=\"col\" style=\"margin-top: 5em;\">\n            <app-sensors-data-table *ngIf=\"_session.isSessionStarted()\" [device]=\"activeDevice\" (submitInfo)=\"openSnackBar($event)\"></app-sensors-data-table>\n        </div>\n    </div>    \n\n</div>\n","import { Component, Input, OnChanges, SimpleChanges, EventEmitter, Output } from '@angular/core';\nimport { Sensor } from '../../interfaces/sensor';\nimport { NgbModal, NgbModalConfig } from '@ng-bootstrap/ng-bootstrap';\nimport { Device } from '../../interfaces/device';\n\n@Component({\n  selector: 'app-bed-canvas',\n  templateUrl: './bed-canvas.component.html',\n  styleUrls: ['./bed-canvas.component.css'],\n})\nexport class BedCanvasComponent implements OnChanges {\n\n  \n  /**\n   * Path of the picture to show\n   */\n  @Input() picture_path: string = \"assets/images/mbox_sleep.png\";\n  /**\n   * Configures how the launcher will be rendered\n   * possible values: picture (default) | button\n   */\n  @Input() mode:string = \"picture\";\n  /**\n   * Device object with all the elements describing the device \n   */\n  @Input() device!:Device | null;\n  @Input() sensorList!: Sensor[];\n\n  @Output() submitObject: EventEmitter<Sensor> = new EventEmitter();\n\n  width:number =110;\n  height:number =190;//mm = (pixels * 25.4) / dpi\n\n  bedStyle:any = {\"width\":\"110mm\", \"height\":\"190mm\",\"min-width\": \"110mm\", \"min-height\":\"190mm\",\"z-index\":2};\n  viewBoxStyle:any = {\"width\":\"110mm\", \"height\":\"190mm\",\"min-width\": \"110mm\", \"min-height\":\"190mm\"};\n  renderReady:boolean = false;\n\n  currentEditable!:Sensor;\n  updateEvent:boolean = false;\n  \n\n  constructor(private modalService: NgbModal){\n    //config.\n  }\n  \n  ngOnChanges(changes: SimpleChanges) {\n    // changes.prop contains the old and the new value...\n    let device = changes['device'];\n    let list = changes['sensorList'];\n    if(device){\n      this.width = device.currentValue.xBedDimension;\n      this.height = device.currentValue.yBedDimension;\n    }else\n    if(list){\n      console.log(\"render ready\");\n      console.log(this.sensorList);\n      this.renderReady = true; \n    }\n  }\n\n  print(value:any){\n    console.log(\"print\");\n    console.log(value);\n\n  }\n\n  showModal(content:any){\n    this.modalService.open(content, {  modalDialogClass: 'bedmap-modal', scrollable: true, centered: true, size:'lg' });\n  }\n\n  getFilteredSensorList(sensorList:Sensor[],type:string):Sensor[]{\n    const fsrList = sensorList.filter(\n      (sensor) => sensor.transducerType.toUpperCase() == type.toUpperCase()\n    );\n    return fsrList;\n  }\n\n  getStringBedDimensions():string{\n    const x = this.device? this.device.xBedDimension: this.width.toString();\n    const y = this.device? this.device.yBedDimension: this.height.toString();\n    const unit = this.device? this.device.bedDimensionUnits: \"cm\";\n    let label = \"\" + x +\" x \"+ y +\" \"+unit;\n    \n    return label;\n  }\n\n  /**\n   * calculate the proportion of pixels to maintain a scale in the bed picture\n   * using the formula:\n   * mm = (pixels * 25.4) / dpi\n   * @param value the value to convert \n   * @param add  value to add\n   * @param substract value to substract\n   * @returns \n   */\n  measureToPixels(value:number, add=0, substract=0):number{\n    const dpi = window.devicePixelRatio*96;\n    //console.log(\"dpi\");\n    //console.log(dpi);\n    const pixel = ((value*dpi)/25.4) + add - substract;\n    //console.log(\"pixel\");\n    //console.log(pixel);\n    return pixel;\n  }\n\n  magnifyMagnitude(value:any,times:number): number{\n    let result = value as number;\n    result = result*times;\n    \n    return result;\n  }\n\n  \n  setEditable(sensor:Sensor){\n    this.currentEditable = sensor;\n  }\n\n  sendActiveSensor = (sensor:Sensor)=>{\n    console.log(\"click!\")\n    console.log(sensor);\n  };\n  sendDeactiveSensor = (sensor:Sensor)=>{\n    console.log(\"click!\")\n    console.log(sensor);\n  };\n\n  getBedDeviceStyle(): any{\n    if(this.device){\n      const width = this.device.xBedDimension?.toString().concat(\"mm\");\n      const height = this.device.yBedDimension?.toString().concat(\"mm\");\n      \n      const style ={ \"width\":width, \"height\":height, \"min-width\": width, \"min-height\": height};\n      //console.log(\"applying style\");\n      //console.log(style);\n      return style;\n\n    }\n    console.log(\"default style\");\n    return this.bedStyle;\n  }\n\n  getViewBoxValues(): any{\n    if(this.device){\n      var width = this.device.xBedDimension? Number(this.device.xBedDimension): 110;\n      var height = this.device.yBedDimension? Number(this.device.yBedDimension): 190;\n      \n      //apply pixelation\n      width = this.measureToPixels(width);\n      height = this.measureToPixels(height);\n\n      const viewbox = \"0,0,\".concat(width.toString()).concat(\",\").concat(height.toString());\n      console.log(\"applying viewbox\");\n      console.log(viewbox);\n      return viewbox;\n\n    }\n    console.log(\"default style\");\n    return this.viewBoxStyle;\n  }\n\n}\n","<ng-template #content let-modal>\n\t<div class=\"modal-header\">\n\t\t<h4 class=\"modal-title\">Sensor Distribution: <span *ngIf=\"device\">{{device.name}}</span></h4>\n        \n\t\t<button type=\"button\" class=\"btn-close\" aria-label=\"Close\" (click)=\"modal.dismiss('Cross click')\"></button>\n\t</div>\n\t<div class=\"modal-body\">\n        <div class=\"row justify-content-center\">\n            <div class=\"col text-center\">\n                <mat-icon style=\"color: rgb(109, 109, 233);\">check_box_outline_blank</mat-icon> ACC-Sensor\n                <mat-icon style=\"color: rgb(236, 100, 59);\">radio_button_unchecked</mat-icon> FSR-Sensor\n                <mat-icon style=\"color: rgb(59, 236, 118);\">radio_button_unchecked</mat-icon> PTZ-Sensor\n            </div>\n        </div>\n        <mat-divider></mat-divider>\n        <div class=\"row justify-content-center\" style=\"position: relative;\">\n            <div class=\"d-flex mbox_bedmap\" [ngStyle]=\"getBedDeviceStyle()\">\n                \n                <svg *ngIf=\"renderReady\" class=\"mbox_bedmap\" [ngStyle]=\"getBedDeviceStyle()\" [attr.viewBox]=\"getViewBoxValues()\">\n\n                    <text [attr.x]=\"measureToPixels(width,0,100)\" [attr.y]=\"measureToPixels(height,0,20)\" fill=\"red\" transform=\"rotate(0 0,0)\">{{getStringBedDimensions()}}</text><!--100 x 20 -->\n                    \n                    <!--FSR-->\n                    <circle *ngFor=\"let s of getFilteredSensorList(sensorList,'FSR')\" \n                            [attr.cx]=\"measureToPixels(s.xLocation)\" \n                            [attr.cy]=\"measureToPixels(s.yLocation)\" \n                            [attr.r]=\"magnifyMagnitude(s.xDimension,3)\" \n                            (click)=\"setEditable(s)\" \n                            [matMenuTriggerFor]=\"menu\"\n                            stroke=\"rgb(236, 100, 59)\" stroke-width=\"4\" fill=\"rgb(236, 100, 59)\" />\n                    <text *ngFor=\"let s of getFilteredSensorList(sensorList,'FSR')\" \n                            [attr.x]=\"measureToPixels(s.xLocation,magnifyMagnitude(s.xDimension,3))\" \n                            [attr.y]=\"measureToPixels(s.yLocation,0,magnifyMagnitude(s.yDimension,3))\" \n                            fill=\"black\" \n                            style=\"font: bold 18px sans-serif;\">{{s.name}}</text>\n                    \n                    \n                    <!--IMU-->\n                    <rect *ngFor=\"let s of getFilteredSensorList(sensorList,'ACC')\" \n                            [attr.x]=\"measureToPixels(s.xLocation)\" \n                            [attr.y]=\"measureToPixels(s.yLocation)\" \n                            rx=\"0\" ry=\"0\" \n                            [attr.width]=\"magnifyMagnitude(s.xDimension,3)\" \n                            [attr.height]=\"magnifyMagnitude(s.yDimension,3)\" \n                            (click)=\"setEditable(s)\" \n                            [matMenuTriggerFor]=\"menu\"\n                            style=\"stroke:rgb(109, 109, 233);stroke-width:2;opacity:0.5\" />\n                    <text *ngFor=\"let s of getFilteredSensorList(sensorList,'ACC')\" \n                            [attr.x]=\"measureToPixels(s.xLocation)\" \n                            [attr.y]=\"measureToPixels(s.yLocation,magnifyMagnitude(s.yDimension,3*2))\" \n                            fill=\"black\" \n                            style=\"font: bold 18px sans-serif;\">{{s.name}}</text>\n                </svg>\n                <img #svgmap src=\"assets/images/bed_map3.png\" width=\"100%\" height=\"100%\" alt=\"bed_map_background\" class=\"backbedimage\"/>\n                <mat-menu #menu=\"matMenu\">\n                    <div *ngIf=\"currentEditable\" style=\"font-size: small;margin: 1em;\">\n                        <span><b>{{currentEditable.name}}</b></span>\n                        <mat-divider></mat-divider>\n                        <p>\n                            <b>x Location:</b> {{currentEditable.xLocation}}<br/>\n                            <b>y Location:</b> {{currentEditable.yLocation}}\n                        </p>\n                        <span class=\"mbox_actionable\">\n                            active?:\n                            <mat-icon [hidden]=\"!currentEditable.active || updateEvent\" style=\"color:#ff4081;padding-top: 7px;\" (click)=\"sendDeactiveSensor(currentEditable)\">toggle_on</mat-icon>\n                            <mat-icon [hidden]=\"currentEditable.active || updateEvent\" style=\"color: gray;padding-top: 7px;\" (click)=\"sendActiveSensor(currentEditable)\">toggle_off</mat-icon>\n                            <mat-icon [hidden]=\"!updateEvent\" class=\"loader\">flip_camera_android</mat-icon>\n                        </span>\n                    </div>\n                    \n\n                </mat-menu>\n            </div>\n            <!--div class=\"d-flex mbox_bedmap\" [ngStyle]=\"getBedDeviceStyle()\">\n                <img src=\"/assets/images/bed_map.png\" width=\"100%\" height=\"100%\" alt=\"bed_map_background\" style=\"object-fit: fill; opacity: 0.5;\"/>\n            </div-->\n        </div>\n\n\t\t\n\t</div>\n\t<div class=\"modal-footer\">\n\t\t<button type=\"button\" class=\"btn btn-light\" (click)=\"modal.close('Close click')\">Close</button>\n\t</div>\n</ng-template>\n<div>\n\n</div>\n\n<div>\n    <img *ngIf=\"mode==='picture'\" mat-card-sm-image [src]=\"picture_path\" width=\"100px\" height=\"90px\" alt=\"Product Picture\" (click)=\"showModal(content)\" />\n    <button *ngIf=\"mode==='button'\" mat-raised-button type=\"button\" class=\"btn del-icon-button mbox_download\" title=\"Connect to device\" (click)=\"showModal(content)\">\n        <mat-icon aria-hidden=\"false\" disabled aria-label=\"connect icon\">sensors</mat-icon>\n        Sensor map\n    </button>\n</div>\n\n\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Patient } from '../../interfaces/patient';\nimport { NgbModal, NgbModalConfig } from '@ng-bootstrap/ng-bootstrap';\nimport { BackendmapService } from '../../services/backendmap.service';\nimport { GlobalUtilService } from '../../services/global-util.service';\nimport { RequestService } from '../../services/request.service';\nimport { SessionService } from '../../services/session.service';\nimport { AgentMessage } from '../../interfaces/agent-message';\n\n@Component({\n  selector: 'app-del-patient-button',\n  templateUrl: './del-patient-button.component.html',\n  styleUrls: ['./del-patient-button.component.css']\n})\nexport class DelPatientButtonComponent {\n\n  @Input('patient') patient!: Patient;\n  @Output() submitInfo: EventEmitter<string> = new EventEmitter();\n\n  warnMessage: string = \"Warning\";\n  errorEvent:boolean = false;\n\n  constructor(config: NgbModalConfig, private modalService: NgbModal, \n    private _request: RequestService, private _backend:BackendmapService,\n    private _session: SessionService, public _util:GlobalUtilService) {\n    // customize default values of modals used by this component tree\n    config.backdrop = 'static';\n    config.keyboard = false;\n  }\n\n  modalOpen(content: any) {\n\t\tthis.modalService.open(content, { centered: true, size: 'lg' });\n\t}\n\n  modalClose(){\n    this.modalService.dismissAll('finished');\n  }\n\n  /**\n   * Send a REST delete\n   */\n  requestDelete():void{\n    //show query bar\n    this._session.setShowQuery();\n    //send REST request\n    this._request.sendBackendDelete(this._backend.DELETE_PATIENT_URL(this.patient.uuid)).subscribe({\n      next:(res) =>{\n        let response:AgentMessage = <AgentMessage>JSON.parse(res);\n        if(response.error){\n          this.errorEvent = true;\n          this.warnMessage = response.message;\n          console.error(response.message);\n        }else{\n          this.submitInfo.emit(response.message);\n          this.modalService.dismissAll('finished');\n        }\n        \n      },\n      error:(err) =>{\n        this.errorEvent = true;\n        this.warnMessage = err;\n        console.log(\"HTTP-Error deleting patient data: \"+err);\n      },\n      complete:() =>{\n        this._session.setEndQuery();\n      }\n    });\n  }\n\n\n\n}\n","<ng-template #deletePatient >\n    <div class=\"modal-header\">\n        <h4 class=\"modal-title\" id=\"modal-basic-title\">Delete Patient <mat-icon>personal_injury</mat-icon></h4>\n        <button type=\"button\" class=\"btn-close\" aria-label=\"Close\" (click)=\"modalClose()\"></button>\n    </div>\n    <div class=\"modal-body\">\n        <div class=\"container\">\n            <div class=\"row  justify-content-center\">\n                <div class=\"col-12 text-center\">\n                    <p class=\"mbox-warn-mssg\">\n                        The following Registered Patient & Data will be erased:\n                        <br/>{{patient.name}}({{patient.uuid}})\n                    </p>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class=\"modal-footer\">\n        <button class=\"btn btn-outline-dark\" (click)=\"modalClose()\">Cancel</button>\n        <button type=\"button\" class=\"btn btn-outline-dark\" (click)=\"requestDelete()\">Confirm</button>\n    </div>\n</ng-template>\n\n<button mat-icon-button color=\"primary\" matTooltip=\"delete patient\" aria-label=\"delete patient icon button with a x icon\" (click)=\"modalOpen(deletePatient)\" style=\"color: #c04d4d;\">\n    <mat-icon>clear</mat-icon>\n</button>","import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { Sensor } from '../../interfaces/sensor';\nimport { NgbModal, NgbModalConfig } from '@ng-bootstrap/ng-bootstrap';\nimport { BackendmapService } from '../../services/backendmap.service';\nimport { GlobalUtilService } from '../../services/global-util.service';\nimport { SessionService } from '../../services/session.service';\n\n@Component({\n  selector: 'app-del-sensor-button',\n  templateUrl: './del-sensor-button.component.html',\n  styleUrls: ['./del-sensor-button.component.css']\n})\nexport class DelSensorButtonComponent implements OnChanges {\n\n  @Input('sensor') sensor!: Sensor;\n  @Input('success') success!: boolean;\n  @Input('error') error!: boolean;\n  @Output() submitInfo: EventEmitter<string> = new EventEmitter();\n  @Output() confirmDeletion: EventEmitter<Sensor> = new EventEmitter();\n\n  warnMessage: string = \"Warning\";\n  additional_message:string = \"\";\n  errorEvent:boolean = false;\n\n  constructor(config: NgbModalConfig, private modalService: NgbModal, private _session: SessionService, public _util:GlobalUtilService) {\n    // customize default values of modals used by this component tree\n    config.backdrop = 'static';\n    config.keyboard = false;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    // changes.prop contains the old and the new value...\n    let confirmEvent = changes['success'];\n    let error = changes['error'];\n    if(confirmEvent || error){\n      this.modalClose();  \n    }\n  }\n\n  modalOpen(content: any) {\n\t\tthis.modalService.open(content, { centered: true, size: 'lg' });\n\t}\n\n  modalClose(){\n    this.modalService.dismissAll('finished');\n    this._session.setEndQuery();\n  }\n\n  /**\n   * Send a REST delete\n   */\n  requestDelete():void{\n    //show query bar\n    this._session.setShowQuery();\n    //send STOMP request from parent\n    this.confirmDeletion.next(this.sensor);\n  }\n\n}\n","<ng-template #deleteSensor >\n    <div class=\"modal-header\">\n        <h4 class=\"modal-title\" id=\"modal-basic-title\">Delete Sensor <mat-icon>sensors_off</mat-icon></h4>\n        <button type=\"button\" class=\"btn-close\" aria-label=\"Close\" (click)=\"modalClose()\"></button>\n    </div>\n    <div class=\"modal-body\">\n        <div class=\"container\">\n            <div class=\"row  justify-content-center\">\n                <div class=\"col-12 text-center\">\n                    <p class=\"mbox-warn-mssg\">\n                        The following Sensor will be removed from the Device:\n                        <br/>{{sensor.transducerType}}({{sensor.name}})\n                        <br/>{{additional_message}}\n                    </p>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class=\"modal-footer\">\n        <button class=\"btn btn-outline-dark\" (click)=\"modalClose()\">Cancel</button>\n        <button type=\"button\" class=\"btn btn-outline-dark\" (click)=\"requestDelete()\">Confirm</button>\n    </div>\n</ng-template>\n\n<button mat-icon-button color=\"primary\" matTooltip=\"delete sensor\" aria-label=\"delete sensor icon button with a x icon\" (click)=\"modalOpen(deleteSensor)\" style=\"color: #c04d4d;\">\n    <mat-icon>clear</mat-icon>\n</button>","import { AfterContentInit, Component, Input, OnChanges, OnDestroy, SimpleChanges, EventEmitter, Output, OnInit, ViewChild } from '@angular/core';\nimport { Message } from '@stomp/stompjs';\nimport { Device } from '../../interfaces/device';\nimport {  interval, Subscription } from 'rxjs';\nimport { GlobalUtilService } from '../../services/global-util.service';\nimport { SessionService } from '../../services/session.service';\nimport { RxStompService } from '../../services/rx-stomp.service';\n\n@Component({\n  selector: 'app-device-card',\n  templateUrl: './device-card.component.html',\n  styleUrls: ['./device-card.component.css']\n})\nexport class DeviceCardComponent implements OnInit, OnChanges, AfterContentInit, OnDestroy {\n\n  @Input('device') device!: Device;\n  @Output() submitInfo: EventEmitter<string> = new EventEmitter();\n\n  aliveSubscriber!: Subscription;\n  querySubscriber!: Subscription;\n  stompSubscriber!: Subscription;\n  /**\n   * Subscription for the queue/device_uuid. Initialized after the rxStomp connection\n   */\n  queueSubscription!: Subscription;\n  /**\n   * Subscription for the new online devices topic. Initialized after the rxStomp connection\n   */\n  newOnlineSubscription!: Subscription;\n  /**\n   * The number of failed attempts before quiting auto-query device\n   */\n  queryCounterThreshold:number =1;\n\n  actionControls:boolean = false;\n  recordingInProgress:boolean = false;\n  queryInProgress:boolean = false;\n  brokerFail:boolean = false;\n\n  constructor(private _rxStomp: RxStompService, private _session: SessionService, public _util:GlobalUtilService) {\n  }\n\n  ngOnInit() {\n    this.stompSubscriber = this._rxStomp.connected$\n      .subscribe(\n        state =>{\n          //assign flag\n          this.brokerFail = false;\n          //create subscription\n          this.queueSubscription = this._rxStomp\n          .watch('/topic/'.concat(this.device.uuid))\n          .subscribe((message: Message) => {\n              console.log('message recieved:');\n              console.log(message);\n              try{\n                const response = JSON.parse(message.body);\n                const params = response.PARAMS;\n\n                //ONLINE_SIGNAL\n                if(response.ACTION == 'ONLINE_SIGNAL'){\n                  this.device.isOnline = (params == this.device.uuid);\n                }else \n                //CONNECTION_TOKEN\n                /*if(response.ACTION == 'CONNECTION_TOKEN'){\n                  this.device.token = params;\n                }else/** */\n                //RECORDING_STATUS\n                if(response.ACTION == 'RECORDING_STATUS'){\n                  this.recordingInProgress = params;\n                  this.device.isOnline =true;\n                  console.log(params);\n                }                \n                else{\n                  console.log('message not processed:');\n                  console.log(message);\n                }\n                //destroys query subscriber to stop sending alive request\n                if(this.querySubscriber !== undefined){\n                  this.querySubscriber.unsubscribe();\n                  this.queryInProgress = false;\n                }\n              }catch(err){\n                console.error('Error processing queue message:');\n                console.error(err);\n              }\n          });\n          //subscribe the online topic to identify late online devices\n          this.newOnlineSubscription = this._rxStomp\n          .watch('/topic/online_devices').subscribe(\n            (message: Message) =>{\n              console.log('report_online message recieved:');\n              console.log(message);\n              try{\n                const newDevice = JSON.parse(message.body);\n                this.device.isOnline = (newDevice.uuid == this.device.uuid);\n\n              }catch(err){\n                console.error('Error processing report_online message:');\n                console.error(err);\n              }\n\n          });\n          //ping the device\n          this.pingDevice(this.device);\n          this.requestConnectionToken(this.device);\n        }\n      );\n  }\n\n\n  ngOnChanges(changes: SimpleChanges) {\n    // changes.prop contains the old and the new value...\n    let deviceEvent = changes['device'];\n    if(deviceEvent){\n      let current:Device = changes['device'].currentValue;\n      if(current !== undefined){\n        this.device = current;\n      }\n    }  \n  }\n\n  ngAfterContentInit() {\n    const secondsCounter = interval(30*1000);\n    this.aliveSubscriber = secondsCounter.subscribe(\n      n => {\n        if(this.device !== undefined){\n          console.log(\"checking device\");\n          this.pingDevice(this.device);\n        }else{\n          console.log(\"device-undefined\");\n        }\n        if(n>=this.queryCounterThreshold){\n          this.aliveSubscriber.unsubscribe();\n          console.log('quiting auto-ping. Number of attempts: '+(n+1));\n        } \n      });\n  }\n\n  ngOnDestroy() {\n    //unbind the subscriber\n    this.aliveSubscriber.unsubscribe();\n    this.queueSubscription.unsubscribe();\n    this.stompSubscriber.unsubscribe();\n    this.newOnlineSubscription.unsubscribe();\n  }\n\n  pingDevice(device:Device): void{\n    //check connection\n    if(this._rxStomp.connected()){\n      const command = this.recordingInProgress?JSON.stringify({ACTION:'RECORDING_STATUS', PARAMS:''}):JSON.stringify({ACTION:'ONLINE_SIGNAL', PARAMS:''});    \n      this._rxStomp.publish({destination : \"/queue/\".concat(this.device.uuid), body: command});\n      this.startQueryCounter(this.device.uuid);\n    }else{\n      this.submitInfo.emit(\"Failed Connecting websocket-Server \");\n    }\n  }\n\n  requestRecordingStatus(device:Device): void{\n    //check connection\n    if(this._rxStomp.connected()){\n      const command = JSON.stringify({ACTION:'RECORDING_STATUS', PARAMS:''});    \n      this._rxStomp.publish({destination : \"/queue/\".concat(device.uuid), body: command});\n      this.startQueryCounter(this.device.uuid);\n    }else{\n      this.submitInfo.emit(\"Failed Connecting websocket-Server \");\n    }\n  }\n\n  requestConnectionToken(device:Device): void{\n    //check connection\n    if(this._rxStomp.connected()){\n      const command = JSON.stringify({ACTION:'CONNECTION_TOKEN', PARAMS:''});    \n      this._rxStomp.publish({destination : \"/queue/\".concat(device.uuid), body: command});\n    }else{\n      this.submitInfo.emit(\"Failed Connecting websocket-Server \");\n    }\n  }\n\n  startQueryCounter(queueName:string = '') :void{\n    this.queryInProgress = true;\n    const queryCounter = interval(5*1000);\n    this.querySubscriber = queryCounter.subscribe(\n      n => {\n        this.queryInProgress = false;\n        this.querySubscriber.unsubscribe();\n        console.log('time-off: no response from device:'+queueName);\n        this.device.isOnline = false;\n        this.submitInfo.emit('Device '+this.device.uuid+' is offline');\n      });\n  }\n\n  showActionControls(): void{\n    this.requestRecordingStatus(this.device);\n    this.actionControls = this.recordingInProgress? this.recordingInProgress: !this.actionControls;\n  }\n\n  toRecordings():void{\n    this.connectDevice();\n    this._session.toPath('recordings');\n  }\n\n  connectDevice(): void{\n    this._session.startSession(this.device, this._rxStomp);\n    //this._router.navigate([ {outlets: {primary:'connecteddevice'} } ])\n  }\n\n  startRecording(): void{\n    if(this._rxStomp.connected()){\n      const command = JSON.stringify({ACTION:'START_RECORDING', PARAMS:''});    \n      this._rxStomp.publish({destination : \"/queue/\".concat(this.device.uuid), body: command});\n      this.requestRecordingStatus(this.device);\n    }else{\n      this.submitInfo.emit(\"Failed Connecting websocket-Server \");\n    }\n  }\n\n  stopRecording(): void{\n    if(this._rxStomp.connected()){\n      const command = JSON.stringify({ACTION:'STOP_RECORDING', PARAMS:''});    \n      this._rxStomp.publish({destination : \"/queue/\".concat(this.device.uuid), body: command});\n      this.requestRecordingStatus(this.device);\n    }else{\n      this.submitInfo.emit(\"Failed Connecting websocket-Server \");\n    }\n  }\n\n  showRecordingInfo(): void{}\n\n}\n","<mat-card class=\"mbox-device-card\" style=\"margin-bottom: 0.5em;\">\n    <mat-card-header>   \n        <mat-card-title-group>\n            <mat-card-subtitle>\n                {{device.uuid}} \n                <button type=\"button\" class=\"btn copy-btn\" title=\"copy uuid\" [cdkCopyToClipboard]=\"device.uuid\">\n                    <mat-icon aria-hidden=\"false\" aria-label=\"copy icon\">content_copy</mat-icon>\n                </button>\n            </mat-card-subtitle>\n        </mat-card-title-group>               \n    </mat-card-header>\n    <mat-card-content>\n        <div class=\"mbox_device_icon\">\n            <!--img mat-card-sm-image src=\"assets/images/mbox_sleep.png\" width=\"100px\" height=\"90px\" alt=\"Product Picture\" /-->\n            <app-bed-canvas mode=\"picture\" ></app-bed-canvas>\n        </div>\n        <h4>{{device.name}}</h4>\n        <ul style=\"list-style-type: none;color: lightslategray;\">\n            <li [hidden]=\"!device.patientDto\"><b>Patient: </b>{{device.patientDto.name}}</li>\n            <li [hidden]=\"!device.bedDimensionUnits\"><b>Bed: </b>{{device.xBedDimension}} x {{device.yBedDimension}} - {{device.bedDimensionUnits}}</li>\n        </ul> \n        \n        <div class=\"mbox_action_control\" [hidden]=\"!actionControls\">\n            <app-recording-controls [device]=\"device\" [isRecording]=\"recordingInProgress\" (startEvent)=\"startRecording()\" (stopEvent)=\"stopRecording()\"></app-recording-controls>\n        </div> \n\n                     \n    </mat-card-content>\n    <mat-card-actions >\n        <div style=\"text-align: left; width: 50%;\">\n            <!--button mat-raised-button type=\"button\" class=\"btn del-icon-button\" title=\"Connect to device\" (click)=\"connectDevice(device)\" >\n                <mat-icon aria-hidden=\"false\" disabled aria-label=\"connect icon\">analytics</mat-icon>\n                Analytics\n            </button-->\n            <button mat-raised-button type=\"button\" [disabled]=\"actionControls\" class=\"btn del-icon-button mbox_download\" title=\"Connect to device\" (click)=\"toRecordings()\" >\n                <mat-icon aria-hidden=\"false\" disabled aria-label=\"connect icon\">folder_zip</mat-icon>\n                Download data\n            </button>\n        </div>\n        <div style=\"text-align: right; width: 100%; padding: 1em;\">\n            <button [hidden]=\"!device.isOnline\" [disabled]=\"!device.isOnline || actionControls\" mat-raised-button type=\"button\" \n                    class=\"btn del-icon-button mbox_configure\" title=\"Connect to device\" (click)=\"connectDevice()\" >\n                <mat-icon aria-hidden=\"false\" disabled aria-label=\"connect icon\">settings_remote</mat-icon>\n                Configure device\n            </button>\n            <button [hidden]=\"device.isOnline\" [disabled]=\"queryInProgress\" mat-raised-button type=\"button\" class=\"btn del-icon-button mbox_configure\" title=\"Connect to device\" (click)=\"pingDevice(device)\" style=\"margin-left: 5px;\">\n                <mat-icon aria-hidden=\"false\" aria-label=\"Check device\">connect_without_contact</mat-icon>\n                Check device\n            </button>\n            <button [hidden]=\"!device.isOnline\" [disabled]=\"device.isRecording\" [ngClass]=\"actionControls?'mbox_recording_active':'mbox_recording'\" mat-raised-button type=\"button\" class=\"btn del-icon-button\" title=\"Connect to device\" (click)=\"showActionControls()\" style=\"margin-left: 5px;\">\n                <mat-icon aria-hidden=\"false\" aria-label=\"Check device\">radio_button_checked</mat-icon>\n                Recording\n            </button>\n        </div>\n    </mat-card-actions>\n    <mat-divider></mat-divider>\n    <mat-card-footer style=\"text-align: right;\">\n        \n        <p style=\"margin-right: 2em;color:green;\" [hidden]=\"!device.isOnline\">\n            online <mat-icon class=\"\"class=\"mbox_query_animation\" aria-hidden=\"false\" aria-label=\"online\">router</mat-icon>\n        </p>\n        <p style=\"margin-right: 2em;\" [hidden]=\"device.isOnline\">\n            last-online: {{device.lastOnline | date:'M/d/yy, h:mm a'}} \n            <mat-icon [hidden]=\"queryInProgress\" aria-hidden=\"false\" aria-label=\"offline\">sensors_off</mat-icon>\n            <mat-icon [hidden]=\"!queryInProgress || recordingInProgress\" class=\"mbox_query_animation\" aria-hidden=\"false\" aria-label=\"query in progress\">sensors</mat-icon>\n            <mat-icon [hidden]=\"!brokerFail\" aria-hidden=\"false\" aria-label=\"offline\">cloud_off</mat-icon>\n        </p>\n    </mat-card-footer>\n</mat-card> \n","import { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport {Observable, Subscription, interval} from 'rxjs';\nimport {map, startWith} from 'rxjs/operators';\nimport { RequestService } from '../../services/request.service';\nimport { BackendmapService } from '../../services/backendmap.service';\nimport { Device } from '../../interfaces/device';\nimport { SessionService } from '../../services/session.service';\nimport { GlobalUtilService } from '../../services/global-util.service';\nimport { AgentMessage } from '../../interfaces/agent-message';\nimport { Patient } from '../../interfaces/patient';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { RxStompService, rxStompServiceFactory } from '../../services/rx-stomp.service';\nimport { Message } from '@stomp/stompjs';\n\n@Component({\n  selector: 'app-edit-device-form',\n  templateUrl: './edit-device-form.component.html',\n  styleUrls: ['./edit-device-form.component.css'],\n  providers: [{provide: RxStompService, useFactory: rxStompServiceFactory}]\n})\nexport class EditDeviceFormComponent implements OnInit, OnChanges {\n\n  @Input('device') device!: Device|null;\n  @Output() submitInfo: EventEmitter<string> = new EventEmitter();\n\n  \n  infoMessage: string|undefined;\n  errorMessage: string|undefined;\n  showError:boolean = false;\n  subscriber!: any;\n  errorEvent:boolean = false;\n  isNewDevice:boolean = false;\n\n  brokerFail:boolean = false;\n  stompSubscriber!:Subscription;\n  queueSubscription!:Subscription;\n\n  deviceForm!:FormGroup;\n  PATIENT_DATA: Patient[] = [];\n  patientDataSource!: MatTableDataSource<Patient>;\n  filteredPatients!: Observable<Patient[]>;\n  patientSelectorFC:FormControl = new FormControl();\n  isPatientAssigned:boolean = true;\n\n  typesFC:FormControl = new FormControl();\n  deviceTypes:string[] = [\"bed\"];\n\n  constructor(private _rxStomp: RxStompService, private _formBuilder: FormBuilder, private _request: RequestService, private _backend:BackendmapService, \n                private _session: SessionService, public _util:GlobalUtilService){\n      if(_session.isSessionStarted()){\n        this.device = this._session.getSessionDeviceData();\n      }else{\n        this._session.toHome();\n      }\n  }\n\n  ngOnInit() {\n    console.log(this.device);\n    this.getPatientData();\n    this.initDeviceForm();\n    \n    this.stompSubscriber = this._rxStomp.connected$\n      .subscribe(\n        state =>{\n          console.log('state');\n          console.log(state);\n          //assign flag\n          this.brokerFail = false;\n          const uuid = this.device?this.device.uuid:'';\n          //create subscription\n          this.queueSubscription = this._rxStomp\n          .watch('/topic/'.concat(uuid))\n          .subscribe((message: Message) => {\n              console.log('message recieved:');\n              console.log(message);\n              try{\n                const response = JSON.parse(message.body);\n                const params = response.PARAMS;\n\n                //ONLINE_SIGNAL\n                if(response.ACTION == 'ONLINE_SIGNAL'){\n                  if(this.device!=null){\n                    this.device.isOnline = (params == uuid);\n                  }\n                }else{\n                  console.log('message not processed:');\n                  console.log(message);\n                }\n                \n              }catch(err){\n                console.error('Error processing queue message:');\n                console.error(err);\n              }\n          });\n        }\n      );\n    \n  }\n\n  ngOnDestroy() {\n    //unbind the subscriber\n    if(this.queueSubscription !== undefined){\n      this.queueSubscription.unsubscribe();\n    }\n    if(this.queueSubscription !== undefined){\n      this.stompSubscriber.unsubscribe();\n    }\n  }\n\n\n  ngOnChanges(changes: SimpleChanges) {\n    // changes.prop contains the old and the new value...\n    let deviceEvent = changes['device'];\n    if(deviceEvent){\n      let current:Device = changes['device'].currentValue;\n      if(current !== undefined){\n        this.initDeviceForm();\n      }\n      this.isNewDevice=false;\n    }    \n  }\n\n  initDeviceForm():void{\n    if(this.device){\n      this.isNewDevice=false;\n\n      //autocomplete formControls\n      this.patientSelectorFC = new FormControl(this.device.patientDto.alias);\n      this.typesFC = new FormControl(this.device.type);\n\n      //Form group form controls\n      this.deviceForm = new FormGroup({\n        uuid: new FormControl({value:this.device.uuid, disabled: true}),\n        type: this.typesFC,\n        name: new FormControl(this.device.name),\n        xBedDimension: new FormControl(this.device.xBedDimension),\n        yBedDimension: new FormControl(this.device.yBedDimension),\n        bedDimensionUnits: new FormControl(this.device.bedDimensionUnits),\n        patient_uuid: new FormControl(this.device.patientUuid),\n        patientDto: new FormControl(this.device.patientDto),\n        patient: new FormControl(this.device.patientDto),\n      });\n    }else{\n      this.isNewDevice = true;\n      this.deviceForm = new FormGroup({\n        uuid: new FormControl(''),\n        type: new FormControl(''),        \n        name: new FormControl(''),        \n        xBedDimension: new FormControl(''),        \n        yBedDimension: new FormControl(''),        \n        bedDimensionUnits: new FormControl('centimeters'),\n        patient_uuid: new FormControl(),\n        patientDto: new FormControl(),\n        patient: new FormControl()\n      });\n    }//else\n  }\n\n  /**\n   * Query the Patient data registered in the server\n   */\n  getPatientData(): void {\n    //Query data\n    this._request.sendBackendGet(this._backend.GET_PATIENT_DATA).subscribe({\n      next:(res) => {\n        let response:AgentMessage = <AgentMessage>JSON.parse(res);\n        this.infoMessage =undefined;\n        this.errorMessage =undefined;\n\n        if(!response.error){\n          this.infoMessage = response.message;\n          this.PATIENT_DATA = response.response;\n          this.patientDataSource = new MatTableDataSource<Patient>(this.PATIENT_DATA);\n\n          //set value for current patient\n          this.patientSelectorFC.setValue(this.device?.patientDto.name, {emitEvent:true});\n\n          //autocomplete for patient list\n          this.filteredPatients = this.patientSelectorFC.valueChanges\n          .pipe(\n            startWith(''),\n            map(value => this._filterPatient(value))\n          );\n          console.log(\"info: \"+this.infoMessage);\n          \n        }else{\n          this.showError = true;\n          this.errorMessage = response.message;\n          this.patientDataSource = new MatTableDataSource<Patient>([]);\n          console.log(\"error: \"+this.infoMessage);\n        }\n      },\n      error:(err) => {\n        console.error(\"HTTP-Error requesting patient data: \"+err);\n      },\n      complete:() =>{\n        //hide progress bar\n        this._session.setEndQuery();\n        this.setInfoSubscriber();\n      }\n        });\n\n  }\n\n  private _filterPatient(value: any): Patient[] {\n    try{\n      const filterValue = value.toLowerCase();\n      this.patientDataSource.filter = value;\n      return this.patientDataSource.filteredData;\n      \n    }catch(err){\n      return this.patientDataSource.data;\n    }\n  }\n\n  actualSubmit(data:any){\n    this.errorEvent = false;\n    this._session.setShowQuery();\n    this._request.sendBackendPut(this._backend.PUT_DEVICE_DATA,data).subscribe({\n      next: (res) =>{\n        let response:AgentMessage = <AgentMessage>JSON.parse(res);\n        if(response.error){\n          this.showError = true;\n          this.errorMessage = response.message;\n          console.error(response.message);\n\n        }else{          \n          this.submitInfo.emit(response.message);\n          //send sync order to device\n          const uuid = this.device?this.device.uuid:'';\n          if(this._rxStomp.connected()){\n            const command = JSON.stringify({ACTION:'SYNC_DEVICE', PARAMS:''});    \n            this._rxStomp.publish({destination : \"/queue/\".concat(uuid), body: command});\n          }else{\n            this.showError = true;\n            this.errorMessage = \"Failed Connecting websocket-Server\";\n          }\n        }\n      },\n      error: (err) =>{\n        this.showError = true;\n        this.errorMessage = err;\n        console.log(\"HTTP-Error requesting patient data: \"+err);\n      },\n      complete: () =>{\n        this._session.setEndQuery();\n      }\n    });\n  }\n\n  stringifyPatientOption(patient?:any):string{\n    if(typeof patient === \"string\"){\n      return patient;\n    }else{\n      const alias = patient? patient.alias? patient.alias: patient.name : undefined;\n      return alias;\n    }\n  }\n\n  setPatient(option:any):void{\n    if(option.source.value){\n      const patient = option.source.value;\n      const patient_uuid = patient.uuid;\n      //restricted patient data is assigned to the device to promote privacy\n      const patientDto = {uuid:patient_uuid,name:patient.alias};\n      let patientControl = new FormControl(patientDto);\n      let uuidControl = new FormControl(patient_uuid);\n      this.deviceForm.setControl(\"patientDto\", patientControl,{emitEvent:true});\n      this.deviceForm.setControl(\"patient_uuid\", uuidControl,{emitEvent:true});\n      this.deviceForm.setControl(\"patient\", uuidControl,{emitEvent:true});\n    }    \n  }\n\n  onSubmit(){\n    if(!this.deviceForm.invalid){\n      let data = this.deviceForm.getRawValue();\n      this.actualSubmit(data);\n    }\n  }\n\n  removeInfoMssg(){\n    this.infoMessage = undefined;\n    this.showError = false;\n  }\n  removeErrorMssg(){\n    this.errorMessage = undefined;\n    this.showError = false;\n  }\n\n  resetForm(){\n    this.initDeviceForm();\n    this.patientSelectorFC.setValue(this.device?.patientDto.name, {emitEvent:true});\n  }\n\n  /**\n   * Disappear the Info header after 10 seconds\n   */\n  setInfoSubscriber() :void{\n    //vanish InfoMessage if any\n    if(this.infoMessage!==undefined){\n      const secondsCounter = interval(10*1000);\n      this.subscriber = secondsCounter.subscribe(\n        n => {\n          this.infoMessage = undefined; \n          this.subscriber.unsubscribe();\n        }\n      );\n    }else{\n      if(this.subscriber !== undefined){\n        this.subscriber.unsubscribe();\n      }\n    }\n  }\n\n\n}\n","<form [formGroup]=\"deviceForm\" (ngSubmit)=\"onSubmit()\">\n    <div class=\"container\">\n\n        <div class=\"row\">\n            <div class=\"col-md text-center\">\n                <h5><span *ngIf=\"device\">({{device.name}})</span></h5>\n                <h4 class=\"mbox-crud-title\">\n                    Device Configuration <span class=\"material-icons\">memory</span>                   \n                </h4>\n                \n            </div>\n        </div>\n        <mat-divider></mat-divider>\n\n        <div class=\"row\" style=\"height: 20px;\">\n            <div class=\"col\">\n                <mat-chip-listbox aria-label=\"Info messages\">\n                <!--info-->\n                <mat-chip-option \n                    [hidden]=\"infoMessage==undefined\" \n                    color=\"accent\" \n                    (removed)=\"removeInfoMssg()\"\n                    class=\"mbox-info-chip\">\n                    {{infoMessage}}\n                    <button matChipRemove>\n                    <mat-icon>cancel</mat-icon>\n                    </button>\n                </mat-chip-option>\n                <!--Error-->\n                <mat-chip-option \n                    [hidden]=\"!showError\" \n                    color=\"accent\" \n                    (removed)=\"removeErrorMssg()\"\n                    class=\"mbox-error-chip\">\n                    {{errorMessage}}\n                    <button matChipRemove>\n                    <mat-icon>cancel</mat-icon>\n                    </button>\n                </mat-chip-option>  \n                </mat-chip-listbox>\n            </div>\n        </div>\n\n        <div class=\"row\" style=\"margin-top: 2em;\">\n            <div class=\"col-md-6\">\n                <!--uuid-->\n                <mat-form-field style=\"width: 100%;\">\n                    <mat-label>UUID</mat-label>\n                    <input matInput placeholder=\"UUID\" type=\"text\" formControlName=\"uuid\" required>\n                    <mat-hint>device uuid</mat-hint>\n                </mat-form-field>\n            </div>\n\n            \n        </div>\n\n        <div class=\"row\" style=\"margin-top: 2em;\">\n        \n            <div class=\"col-md-6\">\n                <!--Name-->\n                <mat-form-field style=\"width: 100%;\">\n                    <mat-label>Name</mat-label>\n                    <input matInput placeholder=\"Name\" type=\"text\" formControlName=\"name\" required>\n                    <mat-hint>device's name</mat-hint>\n                </mat-form-field>\n            </div>\n\n            <div class=\"col-md-4\">\n                <!--type-->\n                <mat-form-field>\n                    <mat-label>Type</mat-label>\n                    <input matInput placeholder=\"Type\" type=\"text\" [formControl]=\"typesFC\" [matAutocomplete]=\"auto\">\n                    <mat-hint>type of device</mat-hint>\n                </mat-form-field>                \n                <mat-autocomplete #auto=\"matAutocomplete\">\n                    <mat-option *ngFor=\"let type of deviceTypes\" [value]=\"type\">{{type}}</mat-option>\n                </mat-autocomplete>\n            </div>\n\n            \n\n        </div>\n\n        <mat-divider style=\"margin: 2em;\"></mat-divider>\n\n        <div class=\"row\" style=\"margin-top: 2em;\">\n            <div class=\"col-md-6\">\n                <!--Patient-Selector-->\n                <mat-form-field style=\"width: 100%;\">\n                    <mat-label>Patient</mat-label>\n                    <input type=\"text\" placeholder=\"select patient\" aria-label=\"patient\" matInput [formControl]=\"patientSelectorFC\" [matAutocomplete]=\"auto_patient\">\n                    <mat-hint>Patient</mat-hint>\n                    \n                    <mat-autocomplete #auto_patient=\"matAutocomplete\" [displayWith]=\"stringifyPatientOption\">\n                      <mat-option *ngFor=\"let patient of filteredPatients | async\" [value]=\"patient\" (onSelectionChange)=\"setPatient($event)\">\n                        {{stringifyPatientOption(patient)}}\n                      </mat-option>\n                    </mat-autocomplete>\n                </mat-form-field>\n            </div>\n\n            <div class=\"col-md-2\"></div>\n\n            <div class=\"col-md-4\" style=\"height: 4em;\" [hidden]=\"!isPatientAssigned\">\n                <app-bed-canvas mode=\"button\" [device]=\"device\" ></app-bed-canvas>\n            </div>\n\n        </div>\n        <div class=\"row\" style=\"margin-top: 2em;\" [hidden]=\"!isPatientAssigned\">\n\n            <div class=\"col-md-4\">\n                <!--bedDimensionUnits-->\n                <mat-form-field>\n                    <mat-label>Bed dimension units</mat-label>\n                    <select matNativeControl formControlName=\"bedDimensionUnits\">\n                        <option *ngFor=\"let unit of _util.hunits\" [value]=\"unit.viewValue\">{{unit.value}}</option>\n                    </select>\n                    <mat-hint>Bed dimension units</mat-hint>\n                </mat-form-field>\n            </div>\n\n            <div class=\"col-md-4\">\n\n                <!--xBedDimension-->\n                <mat-form-field>\n                    <mat-label>Width of Bed</mat-label>\n                    <input matInput placeholder=\"Width of Bed\" type=\"number\" formControlName=\"xBedDimension\" required>\n                    <mat-hint>Width of the Bed</mat-hint>\n                </mat-form-field>\n            </div>\n\n            <div class=\"col-md-4\">\n                <!--yBedDimension-->\n                <mat-form-field>\n                    <mat-label>Lenght of Bed</mat-label>\n                    <input matInput placeholder=\"Lenght of Bed\" type=\"number\" formControlName=\"yBedDimension\" required>\n                    <mat-hint>Lenght of the Bed</mat-hint>\n                </mat-form-field>\n            </div>\n        </div>\n\n        <mat-divider style=\"margin: 2em;\"></mat-divider>\n\n        <div class=\"row\">\n\n            <div class=\"col\">\n                <button [disabled]=\"deviceForm.invalid\" mat-raised-button type=\"button\" \n                        class=\"btn del-icon-button mbox_configure\" title=\"Connect to device\" (click)=\"resetForm()\" >\n                    <mat-icon aria-hidden=\"false\" disabled aria-label=\"connect icon\">undo</mat-icon>\n                    Discard Changes\n                </button>\n            </div>\n\n            <div class=\"col\">\n                <button [disabled]=\"deviceForm.invalid\" mat-raised-button type=\"submit\" \n                        class=\"btn del-icon-button mbox_configure\" title=\"Connect to device\" >\n                    <mat-icon aria-hidden=\"false\" disabled aria-label=\"connect icon\">save</mat-icon>\n                    Save Configuration\n                </button>\n            </div>\n            \n        </div>\n        \n    </div>\n</form>\n","import { Component, Input, OnChanges, SimpleChanges, EventEmitter, Output } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { Recording } from '../../interfaces/recording';\nimport { BackendmapService } from '../../services/backendmap.service';\n\n@Component({\n  selector: 'app-link-download-data-form',\n  templateUrl: './link-download-data-form.component.html',\n  styleUrls: ['./link-download-data-form.component.css']\n})\nexport class LinkDownloadDataFormComponent implements OnChanges {\n\n  /**\n   * Configures how the launcher will be rendered\n   * possible values: fab (default) | button\n   */\n  @Input() mode:string = \"fab\";\n\n  @Input() recording!:Recording;\n\n  @Output() submitObject: EventEmitter<string> = new EventEmitter();\n\n  format:any = \"raw\"\n\n  constructor(private modalService: NgbModal, private _backend:BackendmapService){\n    //config.\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // changes.prop contains the old and the new value...\n    let recording = changes['recording'];\n    if(recording){\n    }\n    console.log(changes);\n  }\n\n  showModal(content:any){\n    this.modalService.open(content, {   scrollable: true, centered: true, size:'lg' });\n  }\n\n  openFiletab(format:string): void{\n    let recording_uuid:string = this.recording.uuid;\n    window.open(this._backend.GET_FORMAT_DATARECORDS_URL(format,recording_uuid), '_blank');\n  }\n\n}\n","<ng-template #content let-modal>\n\t<div class=\"modal-header\">\n\t\t<h4 class=\"modal-title\">Download Data: <span *ngIf=\"recording\">{{recording.uuid}}</span></h4>\n        \n\t\t<button type=\"button\" class=\"btn-close\" aria-label=\"Close\" (click)=\"modal.dismiss('Cross click')\"></button>\n\t</div>\n\t<div class=\"modal-body\">\n\n        <div class=\"container text-center\">\n            <div class=\"row\">\n\n              <div class=\"col\">\n                <img src=\"./assets/images/download.png\" style=\"width: 150px;\"/>\n              </div>\n              <div class=\"col\">\n                <label id=\"radio-group-label\">Select the format to download data</label>\n                <mat-radio-group aria-labelledby=\"radio-group-label\" class=\"radio-group\"  [(ngModel)]=\"format\">\n                    <mat-radio-button class=\"radio-button\" value=\"raw\" selected>CVS</mat-radio-button>\n                    <mat-radio-button class=\"radio-button\" value=\"json\">JSON</mat-radio-button>\n                    <mat-radio-button disabled class=\"radio-button\" value=\"edf\">EDF</mat-radio-button>\n                </mat-radio-group>\n                <div>\n                    <button [disabled]=\"format===''\" mat-raised-button type=\"button\" (click)=\"openFiletab(format)\" class=\"btn del-icon-button mbox_download\" title=\"Download file\" >\n                        <mat-icon aria-hidden=\"false\" disabled aria-label=\"connect icon\">file_download</mat-icon>\n                        Download Data\n                    </button>\n                </div>\n              </div>\n            </div>\n        </div>\n        \t\t\n\t</div>\n\t<div class=\"modal-footer\">\n\t\t<button type=\"button\" class=\"btn btn-light\" (click)=\"modal.close('Close click')\">Close</button>\n\t</div>\n</ng-template>\n<div>\n\n</div>\n\n<div>\n    <button *ngIf=\"mode==='fab'\" matTooltip=\"download data\" mat-mini-fab color=\"primary\" aria-label=\"add patient icon button with a user icon\" (click)=\"showModal(content)\" style=\"background-color: #5f9ea0;\">\n        <mat-icon>file_download</mat-icon>\n    </button>\n\n    <button *ngIf=\"mode==='button'\" mat-raised-button type=\"button\" class=\"btn del-icon-button mbox_download\" title=\"Connect to device\" (click)=\"showModal(content)\">\n        <mat-icon aria-hidden=\"false\" disabled aria-label=\"connect icon\">file_download</mat-icon>\n        Download Data\n    </button>\n\n    <button *ngIf=\"mode==='icon'\" mat-icon-button color=\"primary\" matTooltip=\"download data\"  aria-label=\"add sensor icon button with a user icon\" (click)=\"showModal(content)\" style=\"color:#5f9ea0\">\n        <mat-icon>file_download</mat-icon>\n    </button>\n\n</div>","import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport {FormBuilder, FormControl, FormGroup} from '@angular/forms';\nimport { NgbModalConfig, NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport { GlobalUtilService } from '../../services/global-util.service';\nimport { Patient } from '../../interfaces/patient';\nimport { RequestService } from '../../services/request.service';\nimport { BackendmapService } from '../../services/backendmap.service';\nimport { AgentMessage } from '../../interfaces/agent-message';\nimport { SessionService } from '../../services/session.service';\n\n@Component({\n  selector: 'app-link-patient-form',\n  templateUrl: './link-patient-form.component.html',\n  styleUrls: ['./link-patient-form.component.css']\n})\nexport class LinkPatientFormComponent implements OnChanges {\n\n  @Input('mode') mode: string =\"fab\";\n  @Input('title') title: string = \"Edit Patient Information\";\n  @Input('patient') patient!: Patient;\n\n  @Output() submitInfo: EventEmitter<string> = new EventEmitter();\n\n  warnMessage: string = \"Warning\";\n  errorEvent:boolean = false;\n  editHunit:boolean =false;\n  editWunit:boolean =false;\n\n  modalReference!:NgbModalRef;\n  patientForm!:FormGroup;\n\n\n  constructor(config: NgbModalConfig, private modalService: NgbModal, \n          private _formBuilder: FormBuilder,\n          private _request: RequestService, private _backend:BackendmapService,\n          private _session: SessionService, public _util:GlobalUtilService) {\n\t\t// customize default values of modals used by this component tree\n\t\tconfig.backdrop = 'static';\n\t\tconfig.keyboard = false;\n    this.initPatientForm();\n\t}\n\n  ngOnChanges(changes: SimpleChanges) {\n    // changes.prop contains the old and the new value...\n    let patientEvent = changes['patient'];\n    if(patientEvent){\n      let current:Patient = changes['patient'].currentValue;\n      if(current !== undefined){\n        this.initPatientForm();\n      }\n    }    \n  }\n\n  modalOpen(content: any) {\n\t\tthis.modalReference = this.modalService.open(content, { fullscreen: true });\n\t}\n\n  modalClose(){\n    this.patientForm.markAsUntouched();\n    this.initPatientForm();\n    this.modalReference.close()\n    //this.modalService.dismissAll('finished');\n  }\n\n  initPatientForm():void{\n    if(this.patient !== undefined){\n      this.patientForm = new FormGroup({\n        uuid: new FormControl(this.patient.uuid),\n        name: new FormControl(this.patient.name),\n        alias: new FormControl(this.patient.alias),\n        age: new FormControl(this.patient.age),\n        height: new FormControl(this.patient.height),\n        heightUnit: new FormControl(this.patient.heightUnit),\n        weight: new FormControl(this.patient.weight),\n        weightUnit: new FormControl(this.patient.weightUnit)\n      });\n    }else{\n      this.patientForm = new FormGroup({\n        uuid: new FormControl(''),\n        name: new FormControl(''),\n        alias: new FormControl(''),\n        age: new FormControl(),\n        height: new FormControl(),\n        heightUnit: new FormControl('centimeters'),\n        weight: new FormControl(),\n        weightUnit: new FormControl('kilograms')\n      });\n    }//else\n  }\n\n  getHUnitValue():string{\n    let form = this.patientForm.getRawValue();\n    const unit = form['heightUnit'];\n    if(unit ===null){\n      return \"centimeters\"\n    }else{\n      return unit;\n    }\n  }\n\n  getWUnitValue():string{\n    let form = this.patientForm.getRawValue();\n    const unit = form['weightUnit'];\n    if(unit ===null){\n      return \"kilograms\"\n    }else{\n      return unit;\n    }\n  }\n\n  showUnits(name:string):void{\n      if(name == 'hunit'){\n        this.editHunit = !this.editHunit;\n      }\n      if(name == 'wunit'){\n        this.editWunit = !this.editWunit;\n      }\n      console.log(name);\n  }\n\n  unitChangerLabel(name:string): string{\n    if(name == 'hunit'){\n      return this.editHunit?'set':'Change units';\n    }\n    if(name == 'wunit'){\n      return this.editWunit?'set':'Change units';\n    }\n    return 'Change units';\n  }\n\n  actualSubmit(data:any){\n    this.errorEvent = false;\n    this._session.setShowQuery();\n    this._request.sendBackendPost(this._backend.POST_PATIENT_DATA,data).subscribe({\n      next: (res) =>{\n        let response:AgentMessage = <AgentMessage>JSON.parse(res);\n        if(response.error){\n          this.errorEvent = true;\n          this.warnMessage = response.message;\n          console.error(response.message);\n\n        }else{          \n          this.submitInfo.emit(response.message);\n          this.patientForm.reset();\n          this.modalService.dismissAll('finished')\n        }\n      },\n      error: (err) =>{\n        this.errorEvent = true;\n        this.warnMessage = err;\n        console.log(\"HTTP-Error requesting patient data: \"+err);\n      },\n      complete: () =>{\n        this._session.setEndQuery();\n      }\n    });\n  }\n\n  onSubmit(){\n    if(!this.patientForm.invalid){\n      let data = this.patientForm.getRawValue();\n      this.actualSubmit(data);\n    }\n  }\n}\n","<ng-template #editPatientForm >\n    <form [formGroup]=\"patientForm\" (ngSubmit)=\"onSubmit()\">\n\n        <div class=\"modal-header\">\n            <h4 class=\"modal-title\" id=\"modal-basic-title\">{{title}} <mat-icon>personal_injury</mat-icon></h4>\n            <button type=\"button\" class=\"btn-close\" aria-label=\"Close\" (click)=\"modalClose()\"></button>\n        </div>\n        <div class=\"modal-body\">\n            <div class=\"container\">\n                <div [hidden]=\"!errorEvent\" class=\"row  justify-content-center\">\n                    <div class=\"col-12 text-center\">\n                        <p class=\"mbox-warn-mssg\">{{warnMessage}}</p>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-8\">\n                        <!--Name-->\n                        <mat-form-field style=\"width: 100%;\">\n                            <mat-label>Name</mat-label>\n                            <input matInput placeholder=\"Name\" type=\"text\" formControlName=\"name\" required>\n                            <mat-hint>patient's name</mat-hint>\n                        </mat-form-field>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-4\">\n                        <!--Alias-->\n                        <mat-form-field style=\"width: 100%;\">\n                            <mat-label>Alias</mat-label>\n                            <input matInput placeholder=\"Alias\" type=\"text\" formControlName=\"alias\" required>\n                            <mat-hint>patient's alias reference</mat-hint>\n                        </mat-form-field>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-4\">\n                        <!--Age-->\n                        <mat-form-field>\n                            <mat-label>Age</mat-label>\n                            <input matInput placeholder=\"Age\" type=\"number\" formControlName=\"age\" required>\n                            <mat-hint>patient's age</mat-hint>\n                            <span matSuffix style=\"color: gray;\">years</span>\n                        </mat-form-field>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col\">\n                        <!--Height-->\n                        <mat-form-field>\n                            <mat-label>Height</mat-label>\n                            <input matInput placeholder=\"Height\" type=\"number\" formControlName=\"height\" required>\n                            <mat-hint>patient's height</mat-hint>\n                            <span matSuffix style=\"color: gray;\">{{getHUnitValue()}}</span>\n                        </mat-form-field>\n                        <span> - </span>\n                        <mat-form-field [hidden]=\"!editHunit\">\n                            <select matNativeControl formControlName=\"heightUnit\">\n                                <option *ngFor=\"let unit of _util.hunits\" [value]=\"unit.value\">{{unit.viewValue}}</option>\n                            </select>\n                            <mat-hint>units of height</mat-hint>\n                        </mat-form-field>\n                        <span> \n                            <a mat-flat-button (click)=\"showUnits('hunit')\" style=\" font-size: smaller;color: #6495ed;\">{{unitChangerLabel('hunit')}} -</a>\n                        </span>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col\">\n                        <!--Weight-->\n                        <mat-form-field>\n                            <mat-label>Weight</mat-label>\n                            <input matInput placeholder=\"Weight\" type=\"number\" formControlName=\"weight\" required>\n                            <mat-hint>patient's weight</mat-hint>\n                            <span matSuffix style=\"color: gray;\">{{getWUnitValue()}}</span>\n                        </mat-form-field>\n                        <span> - </span>\n                        <mat-form-field [hidden]=\"!editWunit\">\n                            <select matNativeControl formControlName=\"weightUnit\">\n                                <option *ngFor=\"let unit of _util.wunits\" [value]=\"unit.value\">{{unit.viewValue}}</option>\n                            </select>\n                            <mat-hint>units of weight</mat-hint>\n                        </mat-form-field>\n                        <span> <a mat-flat-button (click)=\"showUnits('wunit')\" style=\" font-size: smaller;color: #6495ed;\">{{unitChangerLabel('wunit')}} -</a></span>\n\n                    </div>\n                </div>\n            </div>\n            \n        </div>\n        <div class=\"modal-footer\">\n            <button class=\"btn btn-outline-dark\" (click)=\"modalClose()\">Cancel</button>\n            <button type=\"button\" class=\"btn btn-outline-dark\" type=\"submit\" [disabled]=\"!patientForm.valid\">Save</button>\n        </div>\n    </form>\n</ng-template>\n\n<button *ngIf=\"mode=='button'\" class=\"btn btn-lg btn-outline-primary\" (click)=\"modalOpen(editPatientForm)\" style=\"color: #5f9ea0;\">\n    Add New <span class=\"material-icons\">person_add_alt</span>\n</button>\n\n<button *ngIf=\"mode=='fab'\" matTooltip=\"add new patient\" mat-mini-fab color=\"primary\" aria-label=\"add patient icon button with a user icon\" (click)=\"modalOpen(editPatientForm)\" style=\"background-color: #5f9ea0;\">\n    <mat-icon>person_add_alt</mat-icon>\n</button>\n\n<button mat-icon-button color=\"primary\" matTooltip=\"edit patient\" *ngIf=\"mode=='icon'\" aria-label=\"add patient icon button with a user icon\" (click)=\"modalOpen(editPatientForm)\" style=\"color: #5f9ea0;\">\n    <mat-icon>drive_file_rename_outline</mat-icon>\n</button>","import { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';\nimport { Sensor } from '../../interfaces/sensor';\nimport { NgbModal, NgbModalConfig, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { Observable, map, startWith } from 'rxjs';\n\n@Component({\n  selector: 'app-link-recorder-form',\n  templateUrl: './link-recorder-form.component.html',\n  styleUrls: ['./link-recorder-form.component.css']\n})\nexport class LinkRecorderFormComponent implements OnChanges, OnInit {\n\n  @Input('mode') mode: string =\"fab\";\n  @Input('title') title: string = \"Edit Sensor Information\";\n  @Input('sensor') sensor!: Sensor;\n  @Input('filelist') filelist!: string[];\n  @Input('error') error!: boolean;\n\n  @Output() submitInfo: EventEmitter<string> = new EventEmitter();\n  @Output() submitObject: EventEmitter<Sensor> = new EventEmitter();\n\n  warnMessage: string = \"Warning\";\n  errorEvent:boolean = false;\n  modalReference!:NgbModalRef;\n  recorderForm!:FormGroup;\n\n  FILE_LIST:string[] = [];\n  currentFiles!:Observable<string[]>;\n  filesFC:FormControl = new FormControl();\n\n  constructor(config: NgbModalConfig, private modalService: NgbModal,){}\n\n  ngOnInit(): void {\n\n    //init the form\n    this.initSensorForm();\n\n    //set listener to the type selector\n    this.currentFiles = this.filesFC.valueChanges\n          .pipe(\n            startWith(''),\n            map(value => this._filterFiles(value)));\n    //reset the control\n    const current = this.recorderForm.get(\"filepath\")?.getRawValue();\n    this.filesFC.patchValue(current);\n    this.recorderForm.setControl(\"filepath\",this.filesFC);\n\n    \n  }\n\n  ngOnChanges(changes: SimpleChanges) {}\n\n\n  private _filterFiles(value:string){\n    const filterValue = value?.toLowerCase();\n    return this.filelist.filter(filename => filename.toLowerCase().includes(filterValue));\n  }\n\n  setFile(event:any):void{\n    console.log(event);\n    //this.recorderForm.get(\"filepath\")?.patchValue(event.data);\n  }\n\n  initSensorForm(): void{\n    if(this.sensor !== undefined && this.sensor.recorder !== undefined){\n      this.recorderForm = new FormGroup({\n          command: new FormControl(this.sensor.recorder.command),\n          filepath: new FormControl(this.sensor.recorder.filepath),\n          streamer: new FormControl(this.sensor.recorder.streamer),\n          params: new FormControl(this.sensor.recorder.params),\n          description: new FormControl(this.sensor.recorder.description)\n      });\n    }else{\n\n      this.recorderForm = new FormGroup({\n        command: new FormControl(''),\n        filepath: new FormControl(''),\n        streamer: new FormControl('false'),\n        params: new FormControl(''),\n        description: new FormControl('')\n      });\n\n      this.sensor.recorder = this.recorderForm.getRawValue();\n    }\n  }\n\n\n\n  modalOpen(content: any) {\n\t\tthis.modalReference = this.modalService.open(content, { size:'xl', fullscreen: false, scrollable: true });\n\t}\n\n  modalClose(){\n    this.recorderForm?.reset();\n    this.initSensorForm();\n    this.modalReference?.close()\n    //this.modalService.dismissAll('finished');\n  }\n\n  onSubmit(){\n    if(!this.recorderForm.invalid){\n      let data = this.recorderForm.getRawValue();\n      this.sensor.recorder = data\n      this.submitObject.next(this.sensor);\n    }\n  }\n\n\n\n}\n","<ng-template #editSensorForm >\n    <form [formGroup]=\"recorderForm\"  class=\"mbox_modal_form\">\n\n        <div class=\"modal-header\">\n            <h4 class=\"modal-title\" id=\"modal-basic-title\">{{title}} <mat-icon>graphic_eq</mat-icon></h4>\n            <button type=\"button\" class=\"btn-close\" aria-label=\"Close\" (click)=\"modalClose()\"></button>\n        </div>\n        <div class=\"modal-body\">\n            <div class=\"container\">\n                <div [hidden]=\"!errorEvent\" class=\"row  justify-content-center\">\n                    <div class=\"col-12 text-center\">\n                        <p class=\"mbox-warn-mssg\">{{warnMessage}}</p>\n                    </div>\n                </div>\n                \n                \n                <div class=\"row\">\n                    <div class=\"col-4\">\n                        <!--command-->\n                        <mat-form-field style=\"width: 100%;\">\n                            <mat-label>Command</mat-label>\n                            <input matInput placeholder=\"Command\" type=\"text\" formControlName=\"command\" required>\n                            <mat-hint>command used to start the recorder</mat-hint>\n                        </mat-form-field>\n                    </div>\n\n                    <div class=\"col-4\">\n                        <!--filepath-->\n                        <mat-form-field style=\"width: 100%;\">\n                            <mat-label>Path</mat-label>\n                            <input matInput placeholder=\"Path\" type=\"text\" [formControl]=\"filesFC\" [matAutocomplete]=\"auto_types\" required>\n                            <mat-hint>filepath to executable recorder</mat-hint>\n                            <span *ngIf=\"sensor\" matPrefix style=\"color: gray;\">./recorders/</span>\n                        </mat-form-field>\n\n                        <mat-autocomplete #auto_types=\"matAutocomplete\" style=\"z-index: 9999;\">\n                            <mat-option *ngFor=\"let file of currentFiles | async\" [value]=\"file\" (onSelectionChange)=\"setFile($event)\">\n                                {{file}}\n                            </mat-option>\n                        </mat-autocomplete>\n                    </div>\n                </div>\n\n                <div class=\"row\">\n                    <div class=\"col-md-8\">\n                        <!--is streamer-->\n                        <label id=\"radio-group-label\">Type of Script:</label><br/>\n                        <mat-radio-group aria-label=\"Select an option\" formControlName=\"streamer\">\n                            <mat-radio-button [value]=\"false\" >Data-Storage</mat-radio-button>\n                            <mat-radio-button [value]=\"true\">MQTT-Streamer</mat-radio-button>\n                        </mat-radio-group>\n                    </div>\n                </div>\n                \n                <div class=\"row\">\n\n                    <div class=\"col-md-8\">\n                        <!--params-->\n                        <mat-form-field style=\"width: 100%;\">\n                            <mat-label>Parameters</mat-label>\n                            <input matInput placeholder=\"Parameters\" type=\"string\" formControlName=\"params\" required>\n                            <mat-hint>additional execution parameters</mat-hint>\n                        </mat-form-field>\n                    </div>\n                </div>\n\n                <div class=\"row\">\n                    <div class=\"col-md-8\">\n                        <!--decription-->\n                        <mat-form-field style=\"width: 100%;\">\n                            <mat-label>Description</mat-label>\n                            <input matInput placeholder=\"Decription\" type=\"text\" formControlName=\"description\">\n                            <mat-hint>additional description</mat-hint>                            \n                        </mat-form-field>                       \n                    </div>\n\n                </div>\n                \n            </div>\n            \n        </div>\n        <div class=\"modal-footer\">\n            <button class=\"btn btn-outline-dark\" (click)=\"modalClose()\">Cancel</button>\n            <button type=\"button\" class=\"btn btn-outline-dark\" type=\"submit\" [disabled]=\"!recorderForm.valid\" (click)=\"onSubmit()\">Save</button>\n        </div>\n    </form>\n</ng-template>\n\n\n<button *ngIf=\"mode=='icon'\" mat-icon-button color=\"primary\" matTooltip=\"edit recorders\"  aria-label=\"add sensor icon button with a user icon\" (click)=\"modalOpen(editSensorForm)\" style=\"color:#5f9ea0\">\n    <mat-icon>graphic_eq</mat-icon>\n</button>","import { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';\nimport {FormBuilder, FormControl, FormGroup} from '@angular/forms';\nimport { NgbModalConfig, NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport { GlobalUtilService } from '../../services/global-util.service';\nimport { Sensor } from '../../interfaces/sensor';\nimport { RequestService } from '../../services/request.service';\nimport { BackendmapService } from '../../services/backendmap.service';\nimport { AgentMessage } from '../../interfaces/agent-message';\nimport { SessionService } from '../../services/session.service';\nimport { CustomSensor } from '../../data/custom-sensor';\nimport { FSRSensor } from '../../data/fsrsensor';\nimport { IMUSensor } from '../../data/imusensor';\nimport { PtzSensor } from '../../data/ptz-sensor';\nimport { AccSensor } from '../../data/acc-sensor';\nimport { Observable, map, startWith } from 'rxjs';\n\n@Component({\n  selector: 'app-link-sensor-form',\n  templateUrl: './link-sensor-form.component.html',\n  styleUrls: ['./link-sensor-form.component.css']\n})\nexport class LinkSensorFormComponent implements OnChanges, OnInit {\n\n  @Input('mode') mode: string =\"fab\";\n  @Input('title') title: string = \"Edit Sensor Information\";\n  @Input('sensor') sensor!: Sensor;\n  @Input('success') success!: boolean;\n  @Input('error') error!: boolean;\n\n  @Output() submitInfo: EventEmitter<string> = new EventEmitter();\n  @Output() submitObject: EventEmitter<Sensor> = new EventEmitter();\n\n  warnMessage: string = \"Warning\";\n  errorEvent:boolean = false;\n  isNewSensor:boolean = false;\n  \n  modalReference!:NgbModalRef;\n  sensorForm!:FormGroup;\n  templateFC:FormControl = new FormControl();\n\n  DATA_TYPES:string[] = ['FSR','IMU'];\n  suportedTypes!:Observable<string[]>;\n  typesFC:FormControl = new FormControl();\n\n  constructor(config: NgbModalConfig, private modalService: NgbModal, \n        private _request: RequestService, private _backend:BackendmapService,\n        private _session: SessionService, public _util:GlobalUtilService) {\n\n          // customize default values of modals used by this component tree\n          config.backdrop = 'static';\n          config.keyboard = false;\n          \n  }\n\n  ngOnInit(): void {\n    //init the form\n    this.initSensorForm();\n    //set listener to the template chooser\n    this.templateFC.valueChanges.subscribe(\n      selection =>{\n        if(selection === \"CUSTOM\"){\n          const template = new CustomSensor();\n          this.resetForm(template);\n          this.typesFC.patchValue(template.transducerType);\n        }else\n        if(selection === \"FSR\"){\n          const template = new FSRSensor();\n          this.resetForm(template);\n          this.typesFC.patchValue(template.transducerType);\n\n        }else \n        if(selection === \"ACC\"){\n          const template = new AccSensor();\n          this.resetForm(template);\n          this.typesFC.patchValue(template.transducerType);\n\n        }else \n        if(selection === \"PTZ\"){\n          const template = new PtzSensor();\n          this.resetForm(template);\n          this.typesFC.patchValue(template.transducerType);\n\n        }else \n        if(selection === \"IMU\"){\n          const template = new IMUSensor();\n          this.resetForm(template);\n          this.typesFC.patchValue(template.transducerType);\n\n        }\n      }\n    );\n    //set listener to the type selector\n    this.suportedTypes = this.typesFC.valueChanges\n          .pipe(\n            startWith(''),\n            map(value => this._filterTypes(value)));\n    //reset the control\n    const current = this.sensorForm.get(\"transducerType\")?.getRawValue();\n    this.typesFC.patchValue(current);\n    this.sensorForm.setControl(\"transducerType\",this.typesFC);\n  }\n\n  private _filterTypes(value:string){\n    const filterValue = value?.toLowerCase();\n    return this.DATA_TYPES.filter(type => type.toLowerCase().includes(filterValue));\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // changes.prop contains the old and the new value...\n    let SensorEvent = changes['sensor'];\n    let confirmEvent = changes['success'];\n    let error = changes['error'];\n    if(SensorEvent){\n      let current:Sensor = changes['sensor'].currentValue;\n      if(current !== undefined){\n        this.initSensorForm();\n        this.isNewSensor=false;\n      }\n    }else \n    //after submit changes    \n    if(confirmEvent || error){\n      this.modalClose();  \n    }\n  }\n\n  modalOpen(content: any) {\n\t\tthis.modalReference = this.modalService.open(content, { fullscreen: true, scrollable: true });\n\t}\n\n  modalClose(){\n    this.sensorForm?.reset();\n    this.initSensorForm();\n    this.modalReference?.close()\n    //this.modalService.dismissAll('finished');\n  }\n\n  initSensorForm(): void{\n    if(this.sensor !== undefined){\n      this.sensorForm = new FormGroup({        \n        uuid: new FormControl({value: this.sensor.uuid, disabled: true}),\n        name: new FormControl(this.sensor.name),\n        transducerType: new FormControl(this.sensor.transducerType),\n        physicalDimension: new FormControl(this.sensor.physicalDimension),\n        physicalMin: new FormControl(this.sensor.physicalMin),\n        physicalMax: new FormControl(this.sensor.physicalMax),\n        digitalMin: new FormControl(this.sensor.digitalMin),\n        digitalMax: new FormControl(this.sensor.digitalMax),\n        xLocation: new FormControl(this.sensor.xLocation),\n        yLocation: new FormControl(this.sensor.yLocation),\n        yDimension: new FormControl(this.sensor.yDimension),\n        xDimension: new FormControl(this.sensor.xDimension),\n        active: new FormControl(this.sensor.active),\n        accessProtocol: new FormControl(this.sensor.accessProtocol),\n        portAddress: new FormControl(this.sensor.portAddress),\n        /*recorder: new FormGroup({\n          comand: new FormControl(this.sensor.recorder.command),\n          exec_path: new FormControl(this.sensor.recorder.exec_path),\n          description: new FormControl(this.sensor.recorder.description)\n        }),/** */\n      });\n\n      this.typesFC.setValue(this.sensor.transducerType);\n\n    }else{\n      this.isNewSensor = true;\n      this.sensorForm = new FormGroup({\n        template: this.templateFC,\n        uuid: new FormControl(''),\n        name: new FormControl(''),\n        transducerType: new FormControl(''),\n        physicalDimension: new FormControl(''),\n        physicalMin: new FormControl(),\n        physicalMax: new FormControl(),\n        digitalMin: new FormControl(),\n        digitalMax: new FormControl(),\n        xLocation: new FormControl(),\n        yLocation: new FormControl(),\n        yDimension: new FormControl(),\n        xDimension: new FormControl(),\n        active: new FormControl(),\n        accessProtocol: new FormControl(''),\n        portAddress: new FormControl(),\n        recorder: new FormGroup({\n          comand: new FormControl(''),\n          exec_path: new FormControl(''),\n          description: new FormControl('')\n        }),\n      });\n      this.typesFC.setValue('');\n    }\n  }\n\n  setType(event:any):void{\n    console.log(event);\n    //this.sensorForm.get(\"type\")?.patchValue(event.data);\n  }\n\n  getCurrentSensorUUID():string{\n    const uuid_value = this.sensorForm.get(\"uuid\")?.getRawValue();\n    return uuid_value;\n  }\n\n  resetForm(defaultSensor:any=this.sensor): void{\n    this.sensorForm.markAsUntouched();\n    const current_uuid= this.sensorForm.get(\"uuid\")?.getRawValue();\n    this.sensorForm = new FormGroup({        \n      uuid: new FormControl({value: current_uuid, disabled: !this.isNewSensor}),\n      name: new FormControl(defaultSensor.name),\n      transducerType: new FormControl(defaultSensor.transducerType),\n      physicalDimension: new FormControl(defaultSensor.physicalDimension),\n      physicalMin: new FormControl(defaultSensor.physicalMin),\n      physicalMax: new FormControl(defaultSensor.physicalMax),\n      digitalMin: new FormControl(defaultSensor.digitalMin),\n      digitalMax: new FormControl(defaultSensor.digitalMax),\n      xLocation: new FormControl(defaultSensor.xLocation),\n      yLocation: new FormControl(defaultSensor.yLocation),\n      yDimension: new FormControl(defaultSensor.yDimension),\n      xDimension: new FormControl(defaultSensor.xDimension),\n      active: new FormControl(defaultSensor.active),\n      accessProtocol: new FormControl(defaultSensor.accessProtocol),\n      portAddress: new FormControl(defaultSensor.portAddress),\n      /*recorder: new FormGroup({\n        comand: new FormControl(this.sensor.recorder.command),\n        exec_path: new FormControl(this.sensor.recorder.exec_path),\n        description: new FormControl(this.sensor.recorder.description)\n      }),/** */\n    });/** */\n  }\n\n  actualSubmit(data:any){\n    this.submitObject.next(data);\n  }\n\n  onSubmit(){\n    if(!this.sensorForm.invalid){\n      let data = this.sensorForm.getRawValue();\n      this.actualSubmit(data);\n    }\n  }\n\n  getRandomUUID(): void{\n    this._request.sendBackendGet(this._backend.GET_RANDOM_UUID_URL).subscribe({\n      next:(res) => {\n        this.sensorForm.get('uuid')?.setValue(res);\n      },\n      error:(err) => {\n        console.error(\"HTTP-Error requesting auto UUID: \"+err);\n      },\n      complete:() => {\n        this._session.setEndQuery();\n      }\n    });\n\n  }\n\n}\n","<ng-template #editSensorForm >\n    <form [formGroup]=\"sensorForm\"  class=\"mbox_modal_form\">\n\n        <div class=\"modal-header\">\n            <h4 class=\"modal-title\" id=\"modal-basic-title\">{{title}} <mat-icon>sensors</mat-icon></h4>\n            <button type=\"button\" class=\"btn-close\" aria-label=\"Close\" (click)=\"modalClose()\"></button>\n        </div>\n        <div class=\"modal-body\">\n            <div class=\"container\">\n                <div [hidden]=\"!errorEvent\" class=\"row  justify-content-center\">\n                    <div class=\"col-12 text-center\">\n                        <p class=\"mbox-warn-mssg\">{{warnMessage}}</p>\n                    </div>\n                </div>\n\n                <div *ngIf=\"isNewSensor\" class=\"row\">\n                    <div class=\"col-md-3\">\n                        <p>Fill from template: </p>\n                    </div>\n                    <div class=\"col-md-4\">\n                        <mat-form-field style=\"width: 100%;\">\n                            <mat-label>Sensor templates</mat-label>\n                            <select matNativeControl [formControl]=\"templateFC\" name=\"the_template\">\n                                <option value=\"CUSTOM\" selected=\"true\">Custom</option>\n                                <option value=\"FSR\" >FSR</option>\n                                <option value=\"ACC\" >ACC</option>\n                                <option value=\"PTZ\" >PTZ</option>                               \n                            </select>\n                        </mat-form-field>\n                    </div>\n                </div>\n                <mat-divider></mat-divider>\n\n                <div class=\"row\">\n                    <div class=\"col-md-4\">\n                        <!--uuid-->\n                        <mat-form-field style=\"width: 100%;\">\n                            <mat-label>UUID</mat-label>\n                            <input matInput placeholder=\"UUID\" type=\"text\" formControlName=\"uuid\" required>\n                            <mat-hint>sensor uuid</mat-hint>\n                        </mat-form-field>\n                    </div>\n\n                    <div *ngIf=\"isNewSensor\" class=\"col-md-4\">\n                        <button class=\"btn btn-outline-dark\" (click)=\"getRandomUUID()\">Set random UUID</button>\n                    </div>\n\n                    <div *ngIf=\"!isNewSensor\" class=\"col-md-4\">\n                        <button type=\"button\" class=\"btn copy-btn\" title=\"copy\" [cdkCopyToClipboard]=\"getCurrentSensorUUID()\">\n                            <mat-icon aria-hidden=\"false\" aria-label=\"copy icon\">content_copy</mat-icon>\n                        </button>\n                    </div>\n\n                </div>\n\n                <div class=\"row\">\n                    <div class=\"col-md-4\">\n                        <mat-checkbox class=\"mbox_check\" formControlName=\"active\">Active Sensor</mat-checkbox>\n                    </div>\n                </div>\n\n                <div class=\"row\">\n                    <div class=\"col-4\">\n                        <!--Name-->\n                        <mat-form-field style=\"width: 100%;\">\n                            <mat-label>Name</mat-label>\n                            <input matInput placeholder=\"Name\" type=\"text\" formControlName=\"name\" required>\n                            <mat-hint>unique name for the sensor</mat-hint>\n                        </mat-form-field>\n                    </div>\n\n                    <div class=\"col-4\">\n                        <!--type-->\n                        <mat-form-field style=\"width: 100%;\">\n                            <mat-label>Type</mat-label>\n                            <input matInput placeholder=\"Type\" type=\"text\" [formControl]=\"typesFC\" [matAutocomplete]=\"auto_types\" required>\n                            <mat-hint>sensor type</mat-hint>\n                        </mat-form-field>\n\n                        <mat-autocomplete #auto_types=\"matAutocomplete\" style=\"z-index: 9999;\">\n                            <mat-option *ngFor=\"let type of suportedTypes | async\" [value]=\"type\" (onSelectionChange)=\"setType($event)\">\n                                {{type}}\n                            </mat-option>\n                        </mat-autocomplete>\n                    </div>\n\n                </div>\n                \n                <div class=\"row\">\n                    <div class=\"col-md-2\">\n                        <!--physicalDimension-->\n                        <mat-form-field style=\"width: 100%;\">\n                            <mat-label>physicalDimension</mat-label>\n                            <input matInput placeholder=\"physicalDimension\" type=\"string\" formControlName=\"physicalDimension\" required>\n                            <mat-hint>physic dimension used by sensor</mat-hint>\n                        </mat-form-field>\n                    </div>\n\n                    <div class=\"col-md-2\">\n                        <!--physicalMin-->\n                        <mat-form-field style=\"width: 100%;\">\n                            <mat-label>physicalMin</mat-label>\n                            <input matInput placeholder=\"physicalMin\" type=\"number\" formControlName=\"physicalMin\" required>\n                            <mat-hint>sensor's physicalMin</mat-hint>\n                            <span *ngIf=\"sensor\" matSuffix style=\"color: gray;\">{{sensor.physicalDimension}}</span>\n                        </mat-form-field>                       \n                    </div>\n\n                    <div class=\"col-md-2\">\n                        <!--physicalMax-->\n                        <mat-form-field style=\"width: 100%;\">\n                            <mat-label>physicalMax</mat-label>\n                            <input matInput placeholder=\"physicalMin\" type=\"number\" formControlName=\"physicalMax\" required>\n                            <mat-hint>sensor's physicalMax</mat-hint>\n                            <span *ngIf=\"sensor\" matSuffix style=\"color: gray;\">{{sensor.physicalDimension}}</span>\n                        </mat-form-field>                       \n                    </div>\n\n                    <div class=\"col-md-2\">\n                        <!--DigitalMin-->\n                        <mat-form-field style=\"width: 100%;\">\n                            <mat-label>DigitalMin</mat-label>\n                            <input matInput placeholder=\"digitalMin\" type=\"number\" formControlName=\"digitalMin\" required>\n                            <mat-hint>sensor's DigitalMin</mat-hint>\n                            <span matSuffix style=\"color: gray;\">V</span>\n                        </mat-form-field>                       \n                    </div>\n\n                    <div class=\"col-md-2\">\n                        <!--DigitalMax-->\n                        <mat-form-field style=\"width: 100%;\">\n                            <mat-label>DigitalMax</mat-label>\n                            <input matInput placeholder=\"digitalMax\" type=\"number\" formControlName=\"digitalMax\" required>\n                            <mat-hint>sensor's DigitalMax</mat-hint>\n                            <span matSuffix style=\"color: gray;\">V</span>\n                        </mat-form-field>                       \n                    </div>\n\n                </div>\n\n                <div class=\"row\">\n                    <div class=\"col-md-2\">\n                        <!--xLocation-->\n                        <mat-form-field style=\"width: 100%;\">\n                            <mat-label>xLocation</mat-label>\n                            <input matInput placeholder=\"xLocation\" type=\"number\" formControlName=\"xLocation\" required>\n                            <mat-hint>sensor's xLocation</mat-hint>\n                        </mat-form-field>\n                    </div>\n\n                    <div class=\"col-md-2\">\n                        <!--yLocation-->\n                        <mat-form-field style=\"width: 100%;\">\n                            <mat-label>yLocation</mat-label>\n                            <input matInput placeholder=\"yLocation\" type=\"number\" formControlName=\"yLocation\" required>\n                            <mat-hint>sensor's yLocation</mat-hint>\n                        </mat-form-field>\n                    </div>\n\n                    <div class=\"col-md-2\">\n                        <!--xDimension-->\n                        <mat-form-field style=\"width: 100%;\">\n                            <mat-label>xDimension</mat-label>\n                            <input matInput placeholder=\"xDimension\" type=\"number\" formControlName=\"xDimension\" required>\n                            <mat-hint>sensor's xDimension</mat-hint>\n                        </mat-form-field>\n                    </div>\n\n                    <div class=\"col-md-2\">\n                        <!--yDimension-->\n                        <mat-form-field style=\"width: 100%;\">\n                            <mat-label>yDimension</mat-label>\n                            <input matInput placeholder=\"yDimension\" type=\"number\" formControlName=\"yDimension\" required>\n                            <mat-hint>sensor's yDimension</mat-hint>\n                        </mat-form-field>\n                    </div>\n\n                </div>\n                \n                <div class=\"row\">\n                    <div class=\"col-md-4\">\n                        <!--accessProtocol-->\n                        <mat-form-field style=\"width: 100%;\">\n                            <mat-label>accessProtocol</mat-label>\n                            <input matInput placeholder=\"accessProtocol\" type=\"string\" formControlName=\"accessProtocol\" >\n                            <mat-hint>sensor's accessProtocol</mat-hint>\n                        </mat-form-field>\n                    </div>\n                    <div class=\"col-md-4\">\n                        <!--portAddress-->\n                        <mat-form-field style=\"width: 100%;\">\n                            <mat-label>portAddress</mat-label>\n                            <input matInput placeholder=\"portAddress\" type=\"string\" formControlName=\"portAddress\" >\n                            <mat-hint>sensor's portAddress</mat-hint>\n                        </mat-form-field>\n                    </div>\n                    \n                </div>\n            </div>\n            \n        </div>\n        <div class=\"modal-footer\">\n            <button class=\"btn btn-outline-dark\" (click)=\"modalClose()\">Cancel</button>\n            <button type=\"button\" class=\"btn btn-outline-dark\" type=\"submit\" [disabled]=\"!sensorForm.valid\" (click)=\"onSubmit()\">Save</button>\n        </div>\n    </form>\n</ng-template>\n\n<button *ngIf=\"mode=='button'\" class=\"btn btn-lg btn-outline-primary\" (click)=\"modalOpen(editSensorForm)\" class=\"mbox-add-button\">\n    Add New <span class=\"material-icons\">post_add</span>\n</button>\n\n<button *ngIf=\"mode=='fab'\" matTooltip=\"add new sensor\" mat-mini-fab color=\"primary\" aria-label=\"add sensor icon button with a user icon\" (click)=\"modalOpen(editSensorForm)\" class=\"mbox-add-button\" >\n    <mat-icon>post_add</mat-icon>\n</button>\n\n<button *ngIf=\"mode=='icon'\" mat-icon-button color=\"primary\" matTooltip=\"edit sensor\"  aria-label=\"add sensor icon button with a user icon\" (click)=\"modalOpen(editSensorForm)\" style=\"color:#5f9ea0\">\n    <mat-icon>drive_file_rename_outline</mat-icon>\n</button>","import { AfterViewInit, Component, OnInit, ViewChild } from '@angular/core';\nimport {MatPaginator} from '@angular/material/paginator';\nimport {MatTableDataSource} from '@angular/material/table';\nimport { Patient } from '../../interfaces/patient';\nimport { SessionService } from '../../services/session.service';\nimport { BackendmapService } from '../../services/backendmap.service';\nimport { RequestService } from 'src/app/shared/services/request.service';\nimport { AgentMessage } from '../../interfaces/agent-message';\nimport { MatSort } from '@angular/material/sort';\nimport { interval } from 'rxjs';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-patient-data-table',\n  templateUrl: './patient-data-table.component.html',\n  styleUrls: ['./patient-data-table.component.css']\n})\nexport class PatientDataTableComponent implements OnInit, AfterViewInit  {\n\n  PATIENT_DATA: Patient[] = [];\n  infoMessage: string|undefined;\n  errorMessage: string|undefined;\n  showError:boolean = false;\n  datacount: number = 0;\n  subscriber!: any;\n\n  displayedColumns: string[] = ['uuid', 'name', 'alias', 'age', 'height', 'weight','controls'];\n  dataSource!: MatTableDataSource<Patient>;\n\n  @ViewChild(MatSort) sort!: MatSort;\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\n\n  constructor(private _request: RequestService, public _session:SessionService, \n    private _snackBar: MatSnackBar, private _backend:BackendmapService){\n\n  }\n\n  ngOnInit(): void {\n    //Query data\n    this._request.sendBackendGet(this._backend.GET_PATIENT_DATA).subscribe({\n      next:(res) => {\n        let response:AgentMessage = <AgentMessage>JSON.parse(res);\n        this.infoMessage =undefined;\n        this.errorMessage =undefined;\n        if(!response.error){\n          this.infoMessage = response.message;\n          this.PATIENT_DATA = response.response;\n          this.dataSource = new MatTableDataSource<Patient>(this.PATIENT_DATA);\n          this.datacount = this.PATIENT_DATA.length;\n          if(this.datacount!=0){\n            this.dataSource.paginator = this.paginator;\n          }\n          console.log(\"info: \"+this.infoMessage);\n          \n        }else{\n          this.showError = true;\n          this.errorMessage = response.message;\n          this.dataSource = new MatTableDataSource<Patient>([]);\n          console.log(\"error: \"+this.infoMessage);\n        }\n      },\n      error:(err) => {\n        console.error(\"HTTP-Error requesting patient data: \"+err);\n      },\n      complete:() =>{\n        //hide progress bar\n        this._session.setEndQuery();\n        this.setInfoSubscriber();\n      }\n        });\n\n  }\n\n  ngAfterViewInit() {\n    this.datacount = this.PATIENT_DATA.length;\n    if(this.datacount!=0){\n      this.dataSource.paginator = this.paginator;\n      this.dataSource.sort = this.sort;\n    }\n  }\n\n  /**\n   * Disappear the Info header after 10 seconds\n   */\n  setInfoSubscriber() :void{\n    //vanish InfoMessage if any\n    if(this.infoMessage!==undefined){\n      const secondsCounter = interval(10*1000);\n      this.subscriber = secondsCounter.subscribe(\n        n => {\n          this.infoMessage = undefined; \n          this.subscriber.unsubscribe();\n        }\n      );\n    }else{\n      if(this.subscriber !== undefined){\n        this.subscriber.unsubscribe();\n      }\n    }\n  }\n\n  openSnackBar(message: any) {\n    console.log(message);\n    this._snackBar.open(message, 'dismiss',{\n      duration: (7 * 1000),\n    });\n  }\n\n  reloadData():void{\n    this._session.setShowQuery();\n    this.ngOnInit();\n  }\n\n  onEditEvent(message:string){\n    this.openSnackBar(message);\n    this.reloadData();\n  }\n\n  removeInfoMssg(){\n    this.infoMessage = undefined;\n    this.showError = false;\n  }\n  removeErrorMssg(){\n    this.errorMessage = undefined;\n    this.showError = false;\n  }\n\n}\n","<div class=\"container\">\n    \n  <div class=\"row\">\n    <div class=\"col\">\n      <mat-chip-listbox aria-label=\"Info messages\">\n        <!--info-->\n        <mat-chip-option \n            [hidden]=\"infoMessage==undefined\" \n            color=\"accent\" \n            (removed)=\"removeInfoMssg()\"\n            class=\"mbox-info-chip\">\n          {{infoMessage}}\n          <button matChipRemove>\n            <mat-icon>cancel</mat-icon>\n          </button>\n        </mat-chip-option>\n        <!--Error-->\n        <mat-chip-option \n            [hidden]=\"!showError\" \n            color=\"accent\" \n            (removed)=\"removeErrorMssg()\"\n            class=\"mbox-error-chip\">\n          {{errorMessage}}\n          <button matChipRemove>\n            <mat-icon>cancel</mat-icon>\n          </button>\n        </mat-chip-option>  \n      </mat-chip-listbox>\n    </div>\n  </div>\n    \n\n    <div class=\"row justify-content-between\">\n      <div class=\"col-4\">\n        <button  class=\"mbox-reload-button\" mat-mini-fab matTooltip=\"reload data\" color=\"warn\"  (click)=\"reloadData()\" aria-label=\"reload icon button with redo icon\">\n          <mat-icon>restart_alt</mat-icon>\n        </button>\n      </div>\n      <div class=\"col-2\">\n        <app-link-patient-form mode=\"fab\" title=\"New Patient\" (submitInfo)=\"onEditEvent($event)\"></app-link-patient-form>\n      </div>\n    </div>\n\n    <div class=\"row\">\n        <div class=\"col-md\">\n            <div [hidden]=\"datacount==0\"class=\"mat-elevation-z8\">\n                <table mat-table matSort  [dataSource]=\"dataSource\">\n              \n                  <!-- uuid Column -->\n                  <ng-container matColumnDef=\"uuid\">\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header sortActionDescription=\"Sort by ID\"> ID </th>\n                    <td mat-cell *matCellDef=\"let patient\"> \n                      <button type=\"button\" class=\"btn copy-btn\" title=\"copy\" [cdkCopyToClipboard]=\"patient.uuid\">\n                          <mat-icon aria-hidden=\"false\" aria-label=\"copy icon\">content_copy</mat-icon>\n                      </button>\n                      {{patient.uuid}} \n                    </td>\n                  </ng-container>\n              \n                  <!-- Name Column -->\n                  <ng-container matColumnDef=\"name\">\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header sortActionDescription=\"Sort by Name\"> Name </th>\n                    <td mat-cell *matCellDef=\"let patient\"> {{patient.name}} </td>\n                  </ng-container>\n\n                  <!-- Alias Column -->\n                  <ng-container matColumnDef=\"alias\">\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header sortActionDescription=\"Sort by Alias\"> Alias </th>\n                    <td mat-cell *matCellDef=\"let patient\"> {{patient.alias}} </td>\n                  </ng-container>\n\n                  <!-- Age Column -->\n                  <ng-container matColumnDef=\"age\">\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header sortActionDescription=\"Sort by Age\"> Age </th>\n                    <td mat-cell *matCellDef=\"let patient\"> {{patient.age}} </td>\n                  </ng-container>\n              \n                  <!-- Weight Column -->\n                  <ng-container matColumnDef=\"weight\">\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header sortActionDescription=\"Sort by Weight\"> Weight </th>\n                    <td mat-cell *matCellDef=\"let patient\"> {{patient.weight}} {{patient.weightUnit}} </td>\n                  </ng-container>\n\n                  <!-- Weight Unit Column -->\n                  <ng-container matColumnDef=\"weightUnit\" hidden>\n                    <th mat-header-cell *matHeaderCellDef> Weight Unit</th>\n                    <td mat-cell *matCellDef=\"let patient\"> {{patient.weightUnit}} </td>\n                  </ng-container>\n              \n                  <!-- height Column -->\n                  <ng-container matColumnDef=\"height\">\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header sortActionDescription=\"Sort by Height\"> Height </th>\n                    <td mat-cell *matCellDef=\"let patient\"> {{patient.height}} {{patient.heightUnit}} </td>\n                  </ng-container>\n\n                  <!-- height Unit Column -->\n                  <ng-container matColumnDef=\"heightUnit\" hidden>\n                    <th mat-header-cell *matHeaderCellDef> Height Unit </th>\n                    <td mat-cell *matCellDef=\"let patient\"> {{patient.heightUnit}} </td>\n                  </ng-container>\n\n                  <!-- Controls -->\n                  <ng-container matColumnDef=\"controls\">\n                    <th mat-header-cell *matHeaderCellDef>  </th>\n                    <td mat-cell *matCellDef=\"let patient\"> \n                      <app-link-patient-form mode=\"icon\" [patient]=\"patient\" (submitInfo)=\"onEditEvent($event)\"></app-link-patient-form>\n                      <app-del-patient-button [patient]=\"patient\" (submitInfo)=\"onEditEvent($event)\"></app-del-patient-button>\n                    </td>\n                  </ng-container>\n              \n                  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n                  <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n                </table>\n              \n                <mat-paginator [pageSizeOptions]=\"[5, 10, 20]\"\n                               showFirstLastButtons\n                               aria-label=\"Select page of Registered Patients\">\n                </mat-paginator>\n              </div>\n              \n        </div>\n    </div>\n</div>\n","import { Component, Input, OnChanges, SimpleChanges, EventEmitter, Output } from '@angular/core';\nimport { Device } from '../../interfaces/device';\n\n@Component({\n  selector: 'app-recording-controls',\n  templateUrl: './recording-controls.component.html',\n  styleUrls: ['./recording-controls.component.css']\n})\nexport class RecordingControlsComponent implements OnChanges{\n\n \n  /**\n   * Configures how the launcher will be rendered\n   * possible values: picture (default) | button\n   */\n  @Input() mode:string = \"picture\";\n  /**\n   * Device object with all the elements describing the device \n   */\n  @Input() device!:Device | null;\n  /**\n   * Defines if a recording is in progress\n   */\n  @Input('isRecording') recordingInProgress:boolean = false;\n\n  @Output() submitObject: EventEmitter<string> = new EventEmitter();\n  @Output() startEvent: EventEmitter<string> = new EventEmitter();\n  @Output() stopEvent: EventEmitter<string> = new EventEmitter();\n\n\n\n  ngOnChanges(changes: SimpleChanges): void {\n    // changes.prop contains the old and the new value...\n    let device = changes['device'];\n    let isRecording = changes['isRecording'];\n    if(device){\n\n    }else \n    if(isRecording){\n      let log:string = isRecording.currentValue?\"recording in progress\": \"recording stopped\";\n      console.log(log);\n    }else{\n\n    }\n  }\n\n  startRecording(event:any):void{\n    this.startEvent.emit(event);\n  }\n\n  stopRecording(event:any):void{\n    this.stopEvent.emit(event);\n  }\n\n  showRecordingInfo():void{\n\n  }\n\n}\n","<div class=\"mbox_action_control\">\n    <a [hidden]=\"recordingInProgress\" (click)=\"startRecording($event)\"><img src=\"assets/images/record.png\" width=\"70px\" /></a>\n    <a [hidden]=\"!recordingInProgress\" (click)=\"stopRecording($event)\"><img src=\"assets/images/stop-button.png\" width=\"50px\" /></a>\n    <a [hidden]=\"!recordingInProgress\" (click)=\"showRecordingInfo()\"><img src=\"assets/images/rec.png\" width=\"40px\" class=\"mbox_rec_controlaction\" /></a>\n    <p [hidden]=\"recordingInProgress\" >click to Start Recording</p>\n    <p [hidden]=\"!recordingInProgress\">click to Stop Recording</p>\n</div> ","import { AfterViewInit, Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges, ViewChild } from '@angular/core';\nimport {MatPaginator} from '@angular/material/paginator';\nimport {MatTableDataSource} from '@angular/material/table';\nimport { SessionService } from '../../services/session.service';\nimport { BackendmapService } from '../../services/backendmap.service';\nimport { RequestService } from 'src/app/shared/services/request.service';\nimport { AgentMessage } from '../../interfaces/agent-message';\nimport { MatSort } from '@angular/material/sort';\nimport { interval } from 'rxjs';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Device } from '../../interfaces/device';\nimport { Recording } from '../../interfaces/recording';\n\n@Component({\n  selector: 'app-recordings-data-table',\n  templateUrl: './recordings-data-table.component.html',\n  styleUrls: ['./recordings-data-table.component.css']\n})\nexport class RecordingsDataTableComponent implements OnInit, OnChanges, AfterViewInit {\n\n  @Input('device') device!: Device|null;\n  @Output() submitInfo: EventEmitter<string> = new EventEmitter();\n\n  RECORDING_DATA: Recording[] = [];\n  infoMessage: string|undefined;\n  errorMessage: string|undefined;\n  showError:boolean = false;\n  datacount: number = 0;\n  subscriber!: any;\n\n  displayedColumns: string[] = ['uuid','registeredDevice', 'startDate', 'stopdate', 'patient','controls'];\n  dataSource!: MatTableDataSource<Recording>;\n\n  @ViewChild(MatSort) sort!: MatSort;\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\n\n  constructor(private _request: RequestService, public _session:SessionService, \n    private _snackBar: MatSnackBar, private _backend:BackendmapService){\n\n  }\n\n  ngOnInit(): void {\n    this.requestRecordingInfo();\n  }\n\n  ngAfterViewInit() {\n    if(!this.device){\n\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // changes.prop contains the old and the new value...\n    let deviceEvent = changes['device'];\n    if(deviceEvent){console.log('deviceEvent:'); console.log(deviceEvent);\n      let current:Device = changes['device'].currentValue;\n      if(current !== undefined && current !== null){\n        this.device = current;\n        this.displayedColumns= ['uuid', 'startDate', 'stopdate', 'patient','controls'];\n      }else{\n        this.displayedColumns= ['uuid','registeredDevice', 'startDate', 'stopdate', 'patient','controls'];\n      }      \n    }\n  }\n\n  requestRecordingInfo(): void {\n    const recordings_end_point:string = this.device!==null? this._backend.GET_DEVICE_RECORDINGS_URL(this.device.uuid): this._backend.GET_RECORDING_LIST;\n    //Query data\n    this._request.sendBackendGet(recordings_end_point).subscribe({\n      next:(res) => {\n        let response:AgentMessage = <AgentMessage>JSON.parse(res);\n        this.infoMessage =undefined;\n        this.errorMessage =undefined;\n        if(!response.error){\n          this.infoMessage = response.message;\n          this.RECORDING_DATA = response.response;\n          this.dataSource = new MatTableDataSource<Recording>(this.RECORDING_DATA);\n          this.datacount = this.RECORDING_DATA.length;\n          if(this.datacount!=0){\n            this.dataSource.paginator = this.paginator;\n            this.dataSource.sort = this.sort;\n          }\n          console.log(\"info: \"+this.infoMessage);\n          \n        }else{\n          this.showError = true;\n          this.errorMessage = response.message;\n          this.dataSource = new MatTableDataSource<Recording>([]);\n          console.log(\"error: \"+this.infoMessage);\n        }\n      },\n      error:(err) => {\n        console.error(\"HTTP-Error requesting recordings data: \"+err);\n      },\n      complete:() =>{\n        //hide progress bar\n        this._session.setEndQuery();\n        this.setInfoSubscriber();\n      }\n        });\n  }\n\n  /**\n   * Disappear the Info header after 10 seconds\n   */\n  setInfoSubscriber() :void{\n    //vanish InfoMessage if any\n    if(this.infoMessage!==undefined){\n      const secondsCounter = interval(10*1000);\n      this.subscriber = secondsCounter.subscribe(\n        n => {\n          this.infoMessage = undefined; \n          this.subscriber.unsubscribe();\n        }\n      );\n    }else{\n      if(this.subscriber !== undefined){\n        this.subscriber.unsubscribe();\n      }\n    }\n  }\n\n  reloadData():void{\n    this._session.setShowQuery();\n    this.requestRecordingInfo();\n  }\n\n  removeInfoMssg(){\n    this.infoMessage = undefined;\n    this.showError = false;\n  }\n  removeErrorMssg(){\n    this.errorMessage = undefined;\n    this.showError = false;\n  }\n\n}\n","<div class=\"container\">\n    <!--Info headers-->\n    <div class=\"row\" style=\"height: 10px;\">\n      <div class=\"col\">\n        <mat-chip-listbox aria-label=\"Info messages\">\n          <!--info-->\n          <mat-chip-option \n              [hidden]=\"infoMessage==undefined\" \n              color=\"accent\" \n              (removed)=\"removeInfoMssg()\"\n              class=\"mbox-info-chip\">\n            {{infoMessage}}\n            <button matChipRemove>\n              <mat-icon>cancel</mat-icon>\n            </button>\n          </mat-chip-option>\n          <!--Error-->\n          <mat-chip-option \n              [hidden]=\"!showError\" \n              color=\"accent\" \n              (removed)=\"removeErrorMssg()\"\n              class=\"mbox-error-chip\">\n            {{errorMessage}}\n            <button matChipRemove>\n              <mat-icon>cancel</mat-icon>\n            </button>\n          </mat-chip-option>  \n        </mat-chip-listbox>\n      </div>\n    </div>\n      \n  \n      <div class=\"row justify-content-between\">\n        <div class=\"col-4\">\n          <button  class=\"mbox-reload-button\" mat-mini-fab matTooltip=\"reload data\" color=\"warn\"  (click)=\"reloadData()\" aria-label=\"reload icon button with redo icon\">\n            <mat-icon>restart_alt</mat-icon>\n          </button>\n        </div>\n        <div class=\"col-2\">\n          <!--app-link-patient-form mode=\"fab\" title=\"New Patient\" (submitInfo)=\"onEditEvent($event)\"></app-link-patient-form-->\n        </div>\n      </div>\n  \n      <div class=\"row\">\n          <div class=\"col-md\">\n              <div class=\"mat-elevation-z8\">\n                  <table mat-table matSort  [dataSource]=\"dataSource\">\n                \n                    <!-- uuid Column -->\n                    <ng-container matColumnDef=\"uuid\">\n                      <th mat-header-cell *matHeaderCellDef mat-sort-header sortActionDescription=\"Sort by ID\"> ID </th>\n                      <td mat-cell *matCellDef=\"let rec\"> \n                        <button type=\"button\" class=\"btn copy-btn\" title=\"copy\" [cdkCopyToClipboard]=\"rec.uuid\">\n                            <mat-icon aria-hidden=\"false\" aria-label=\"copy icon\">content_copy</mat-icon>\n                        </button>\n                        {{rec.uuid}} \n                      </td>\n                    </ng-container>\n\n                    <!-- device Column -->\n                    <ng-container matColumnDef=\"registeredDevice\">\n                      <th mat-header-cell *matHeaderCellDef mat-sort-header sortActionDescription=\"Sort by device\"> Device </th>\n                      <td mat-cell *matCellDef=\"let rec\"> {{rec.registeredDevice.name}} </td>\n                    </ng-container>\n                \n                    <!-- startDate Column -->\n                    <ng-container matColumnDef=\"startDate\">\n                      <th mat-header-cell *matHeaderCellDef mat-sort-header sortActionDescription=\"Sort by startDate\"> Started at </th>\n                      <td mat-cell *matCellDef=\"let rec\"> {{rec.startDate}} </td>\n                    </ng-container>\n  \n                    <!-- stopdate Column -->\n                    <ng-container matColumnDef=\"stopdate\">\n                      <th mat-header-cell *matHeaderCellDef mat-sort-header sortActionDescription=\"Sort by stopdate\"> Stoped at </th>\n                      <td mat-cell *matCellDef=\"let rec\"> {{rec.stopdate}} </td>\n                    </ng-container>\n  \n                    <!-- patient Column -->\n                    <ng-container matColumnDef=\"patient\">\n                      <th mat-header-cell *matHeaderCellDef mat-sort-header sortActionDescription=\"Sort by active\"> Patient </th>\n                      <td mat-cell *matCellDef=\"let rec\"> {{rec.patient.name}} </td>\n                    </ng-container>\n                \n                    <!-- Controls -->\n                    <ng-container matColumnDef=\"controls\">\n                      <th mat-header-cell *matHeaderCellDef>  </th>\n                      <td mat-cell *matCellDef=\"let rec\"> \n                        <app-link-download-data-form mode=\"icon\" [recording]=\"rec\"></app-link-download-data-form>\n                      </td>\n                    </ng-container>\n                \n                    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n                    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n                  </table>\n                \n                  <mat-paginator [pageSizeOptions]=\"[5, 10, 20]\"\n                                 showFirstLastButtons\n                                 aria-label=\"Select page of Records\">\n                  </mat-paginator>\n                </div>\n                \n          </div>\n      </div>\n  </div>\n","import { AfterViewInit, Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges, ViewChild } from '@angular/core';\nimport {MatPaginator} from '@angular/material/paginator';\nimport {MatTableDataSource} from '@angular/material/table';\nimport { Sensor } from '../../interfaces/sensor';\nimport { SessionService } from '../../services/session.service';\nimport { BackendmapService } from '../../services/backendmap.service';\nimport { RequestService } from 'src/app/shared/services/request.service';\nimport { AgentMessage } from '../../interfaces/agent-message';\nimport { MatSort } from '@angular/material/sort';\nimport { Subscription, interval } from 'rxjs';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Device } from '../../interfaces/device';\nimport { RxStompService } from '../../services/rx-stomp.service';\nimport { Message } from '@stomp/stompjs';\n\n@Component({\n  selector: 'app-sensors-data-table',\n  templateUrl: './sensors-data-table.component.html',\n  styleUrls: ['./sensors-data-table.component.css']\n})\nexport class SensorsDataTableComponent implements OnInit, OnChanges{\n\n  @Input('device') device!: Device;\n  @Output() submitInfo: EventEmitter<string> = new EventEmitter();\n\n\n  SENSOR_DATA: Sensor[] = [];\n  infoMessage: string|undefined;\n  errorMessage: string|undefined;\n  showError:boolean = false;\n  datacount: number = 0;\n  subscriber!: any;\n\n  RECORD_FILES:string[] =[];\n\n  brokerFail:boolean = false;\n  stompSubscriber!:Subscription;\n  queueSubscription!:Subscription;\n  activeUpdateEvent:boolean = false;\n  submitSuccess:boolean = false;\n\n  displayedColumns: string[] = ['uuid', 'name', 'transducerType', 'active', 'accessProtocol','controls'];\n  dataSource!: MatTableDataSource<Sensor>;\n\n  @ViewChild(MatSort) sort!: MatSort;\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\n\n  constructor(private _rxStomp: RxStompService, private _request: RequestService, public _session:SessionService, \n    private _snackBar: MatSnackBar, private _backend:BackendmapService){\n\n  }\n\n  ngOnInit(): void {\n    this.stompSubscriber = this._rxStomp.connected$\n      .subscribe(\n        state =>{\n          console.log('state');\n          console.log(state);\n          console.log(this.device);\n          //assign flag\n          this.brokerFail = false;\n          const uuid = this.device?this.device.uuid:'';\n          //create subscription\n          this.queueSubscription = this._rxStomp\n          .watch('/topic/'.concat(uuid))\n          .subscribe((message: Message) => {\n              console.log('message recieved:');\n              console.log(message);\n              try{\n                const response = JSON.parse(message.body);\n                const params = response.PARAMS;\n\n                //ONLINE_SIGNAL\n                if(response.ACTION == 'ONLINE_SIGNAL'){\n                  if(this.device!=null){\n                    this.device.isOnline = (params == uuid);\n                  }\n                }else\n                //PROCEDURE_FAIL\n                if(response.ACTION == 'PROCEDURE_FAIL'){\n                  this.errorMessage = params.origin.concat(' Error!: ').concat(params.message);\n                  this.showError = true;\n                  this.submitSuccess = false;\n                  this.activeUpdateEvent = false;\n                  this._session.setEndQuery();\n                }else\n\n                //LIST_SENSORS\n                if(response.ACTION == 'LIST_SENSORS'){\n                  console.log('LIST_SENSORS');\n                  console.log(params);\n                  if(this.device!=null){\n                    this.SENSOR_DATA = params;\n                    this.dataSource = new MatTableDataSource<Sensor>(this.SENSOR_DATA);\n                    this.datacount = this.SENSOR_DATA.length;\n                    if(this.datacount!=0){\n                      this.dataSource.paginator = this.paginator;\n                      this.dataSource.sort = this.sort;\n                    }\n                  }\n                  this.activeUpdateEvent = false;\n                  this._session.setEndQuery();\n                  //request record-files \n                  this.requestRecorderFileInfo();\n                }\n\n                //LIST_RECORDER_FILES\n                if(response.ACTION == 'LIST_RECORDER_FILES'){\n                  console.log('LIST_RECORDER_FILES');\n                  console.log(params);\n                  this.RECORD_FILES = params;                  \n                  this.activeUpdateEvent = false;\n                  this._session.setEndQuery();\n                }\n                \n                else{\n                  console.log('message not processed:');\n                  console.log(message);\n                  this.activeUpdateEvent = false;\n                  this._session.setEndQuery();\n                }\n                \n              }catch(err){\n                console.error('Error processing queue message:');\n                console.error(err);\n                this.activeUpdateEvent = false;\n                this._session.setEndQuery();\n              }\n          });\n          //send signal\n          this.requestSensorList(this.device);\n        }\n    );\n    \n  }\n\n\n  ngOnChanges(changes: SimpleChanges) {\n    // changes.prop contains the old and the new value...\n    let deviceEvent = changes['device'];\n    console.log('changes')\n    if(deviceEvent){\n      let current:Device = changes['device'].currentValue;\n      if(current !== undefined){\n        this.device = current;        \n      }\n    }  \n  }\n\n  requestSensorList(device:Device): void{\n    //check connection\n    if(this._rxStomp.connected()){\n      const command = JSON.stringify({ACTION:'LIST_SENSORS', PARAMS:''});  \n      const uuid = this.device? this.device.uuid:'';  \n      this._rxStomp.publish({destination : \"/queue/\".concat(uuid), body: command});\n    }else{\n      this.submitInfo.emit(\"Failed Connecting websocket-Server \");\n    }\n  }\n\n  sendActiveSensor(sensor:Sensor){\n    if(!this.activeUpdateEvent){\n      this.activeUpdateEvent = true;\n      if(this._rxStomp.connected()){\n        const command = JSON.stringify({ACTION:'ACTIVATE_SENSOR', PARAMS:{uuid:sensor.uuid}});  \n        const uuid = this.device? this.device.uuid:'';  \n        this._rxStomp.publish({destination : \"/queue/\".concat(uuid), body: command});\n      }else{\n        this.submitInfo.emit(\"Failed Connecting websocket-Server \");\n        this.activeUpdateEvent = false;\n      }\n    }    \n  }\n\n  sendDeactiveSensor(sensor:Sensor){\n    if(!this.activeUpdateEvent){\n      this.activeUpdateEvent = true;\n      if(this._rxStomp.connected()){\n        const command = JSON.stringify({ACTION:'DEACTIVATE_SENSOR', PARAMS:{uuid:sensor.uuid}});  \n        const uuid = this.device? this.device.uuid:'';  \n        this._rxStomp.publish({destination : \"/queue/\".concat(uuid), body: command});\n      }else{\n        this.submitInfo.emit(\"Failed Connecting websocket-Server \");\n        this.activeUpdateEvent = false;\n      }\n    }    \n  }\n\n  sendAddSensor(sensor:Sensor){\n    this._session.setShowQuery();\n    if(!this.activeUpdateEvent){\n      this.activeUpdateEvent = true;\n      if(this._rxStomp.connected()){\n        this._session.setShowQuery();\n        const command = JSON.stringify({ACTION:'ADD_SENSOR', PARAMS:{sensor:sensor}});  \n        const uuid = this.device? this.device.uuid:'';  \n        this._rxStomp.publish({destination : \"/queue/\".concat(uuid), body: command});\n      }else{\n        this.submitInfo.emit(\"Failed Connecting websocket-Server \");\n        this.activeUpdateEvent = false;\n      }\n    } \n  }\n\n  sendDeleteSensor(sensor:Sensor){\n    if(!this.activeUpdateEvent){\n      this.activeUpdateEvent = true;\n      if(this._rxStomp.connected()){\n        this._session.setShowQuery();\n        const command = JSON.stringify({ACTION:'REMOVE_SENSOR', PARAMS:{uuid:sensor.uuid}});  \n        const uuid = this.device? this.device.uuid:'';  \n        this._rxStomp.publish({destination : \"/queue/\".concat(uuid), body: command});\n      }else{\n        this.submitInfo.emit(\"Failed Connecting websocket-Server \");\n        this.activeUpdateEvent = false;\n      }\n    } \n  }\n\n  requestRecorderFileInfo(){\n    if(!this.activeUpdateEvent){\n      this.activeUpdateEvent = true;\n      if(this._rxStomp.connected()){\n        this._session.setShowQuery();\n        const command = JSON.stringify({ACTION:'LIST_RECORDER_FILES', PARAMS:{}});  \n        const uuid = this.device? this.device.uuid:'';  \n        this._rxStomp.publish({destination : \"/queue/\".concat(uuid), body: command});\n      }else{\n        this.submitInfo.emit(\"Failed Connecting websocket-Server \");\n        this.activeUpdateEvent = false;\n      }\n    } \n  }\n\n  requestSensorInfo(): void {\n    //Query data\n    const uuid = this.device? this.device.uuid:'';\n    this._request.sendBackendGet(this._backend.GET_DEVICE_SENSOR_URL(uuid)).subscribe({\n      next:(res) => {\n        let response:AgentMessage = <AgentMessage>JSON.parse(res);\n        this.infoMessage =undefined;\n        this.errorMessage =undefined;\n        if(!response.error){\n          this.infoMessage = response.message;\n          this.SENSOR_DATA = response.response;\n          this.dataSource = new MatTableDataSource<Sensor>(this.SENSOR_DATA);\n          this.datacount = this.SENSOR_DATA.length;\n          if(this.datacount!=0){\n            this.dataSource.paginator = this.paginator;\n            this.dataSource.sort = this.sort;\n          }\n          console.log(\"info: \"+this.infoMessage);\n          \n        }else{\n          this.showError = true;\n          this.errorMessage = response.message;\n          this.dataSource = new MatTableDataSource<Sensor>([]);\n          console.log(\"error: \"+this.infoMessage);\n        }\n      },\n      error:(err) => {\n        console.error(\"HTTP-Error requesting sensor data: \"+err);\n        this._session.setEndQuery();\n      },\n      complete:() =>{\n        //hide progress bar\n        this._session.setEndQuery();\n        this.setInfoSubscriber();\n      }\n        });\n  }\n\n  \n\n  /**\n   * Disappear the Info header after 10 seconds\n   */\n  setInfoSubscriber() :void{\n    //vanish InfoMessage if any\n    if(this.infoMessage!==undefined){\n      const secondsCounter = interval(10*1000);\n      this.subscriber = secondsCounter.subscribe(\n        n => {\n          this.infoMessage = undefined; \n          this.subscriber.unsubscribe();\n        }\n      );\n    }else{\n      if(this.subscriber !== undefined){\n        this.subscriber.unsubscribe();\n      }\n    }\n  }\n\n  reloadData():void{\n    this._session.setShowQuery();\n    this.requestSensorList(this.device);\n  }\n\n  removeInfoMssg(){\n    this.infoMessage = undefined;\n    this.showError = false;\n  }\n  removeErrorMssg(){\n    this.errorMessage = undefined;\n    this.showError = false;\n  }\n\n  submitSensor(event:any){\n    console.log(event);\n    const sensor = event as Sensor;\n    this.sendAddSensor(sensor);\n  }\n\n  onEditEvent(message:string){\n    this.openSnackBar(message);\n    this.reloadData();\n  }\n\n  openSnackBar(message: any) {\n    console.log(message);\n    this._snackBar.open(message, 'dismiss',{\n      duration: (7 * 1000),\n    });\n  }\n\n\n}\n","<div class=\"container\">\n    <!--Info headers-->\n    <div class=\"row\" style=\"height: 10px;\">\n      <div class=\"col\">\n        <mat-chip-listbox aria-label=\"Info messages\">\n          <!--info-->\n          <mat-chip-option \n              [hidden]=\"infoMessage==undefined\" \n              color=\"accent\" \n              (removed)=\"removeInfoMssg()\"\n              class=\"mbox-info-chip\">\n            {{infoMessage}}\n            <button matChipRemove>\n              <mat-icon>cancel</mat-icon>\n            </button>\n          </mat-chip-option>\n          <!--Error-->\n          <mat-chip-option \n              [hidden]=\"!showError\" \n              color=\"accent\" \n              (removed)=\"removeErrorMssg()\"\n              class=\"mbox-error-chip\">\n            {{errorMessage}}\n            <button matChipRemove>\n              <mat-icon>cancel</mat-icon>\n            </button>\n          </mat-chip-option>  \n        </mat-chip-listbox>\n      </div>\n    </div>\n      \n      <div class=\"row justify-content-end\">\n        <div class=\"col-md-2\">\n          <app-bed-canvas mode=\"button\" [device]=\"device\" [sensorList]=\"SENSOR_DATA\" ></app-bed-canvas>\n        </div>\n      </div>\n      <div class=\"row justify-content-between\">\n        <div class=\"col-4\">\n          <button  class=\"mbox-reload-button\" mat-mini-fab matTooltip=\"reload data\" color=\"warn\"  (click)=\"reloadData()\" aria-label=\"reload icon button with redo icon\">\n            <mat-icon>restart_alt</mat-icon>\n          </button>\n        </div>\n        <div class=\"col-2\">\n          <app-link-sensor-form mode=\"fab\" title=\"New Sensor\" [success]=\"submitSuccess\" [error]=\"showError\" (submitObject)=\"submitSensor($event)\" (submitInfo)=\"onEditEvent($event)\"></app-link-sensor-form>\n        </div>\n        \n      </div>\n  \n      <div class=\"row\">\n          <div class=\"col-md\">\n              <div class=\"mat-elevation-z8\">\n                  <table mat-table matSort  [dataSource]=\"dataSource\">\n                \n                    <!-- uuid Column -->\n                    <ng-container matColumnDef=\"uuid\">\n                      <th mat-header-cell *matHeaderCellDef mat-sort-header sortActionDescription=\"Sort by ID\"> ID </th>\n                      <td mat-cell *matCellDef=\"let sensor\"> \n                        <button type=\"button\" class=\"btn copy-btn\" title=\"copy\" [cdkCopyToClipboard]=\"sensor.uuid\">\n                            <mat-icon aria-hidden=\"false\" aria-label=\"copy icon\">content_copy</mat-icon>\n                        </button>\n                        {{sensor.uuid}} \n                      </td>\n                    </ng-container>\n                \n                    <!-- Name Column -->\n                    <ng-container matColumnDef=\"name\">\n                      <th mat-header-cell *matHeaderCellDef mat-sort-header sortActionDescription=\"Sort by Name\"> Name </th>\n                      <td mat-cell *matCellDef=\"let sensor\"> {{sensor.name}} </td>\n                    </ng-container>\n  \n                    <!-- transducerType Column -->\n                    <ng-container matColumnDef=\"transducerType\">\n                      <th mat-header-cell *matHeaderCellDef mat-sort-header sortActionDescription=\"Sort by transducerType\"> transducerType </th>\n                      <td mat-cell *matCellDef=\"let sensor\"> {{sensor.transducerType}} </td>\n                    </ng-container>\n  \n                    <!-- active Column -->\n                    <ng-container matColumnDef=\"active\">\n                      <th mat-header-cell *matHeaderCellDef mat-sort-header sortActionDescription=\"Sort by active\"> Active </th>\n                      <td mat-cell *matCellDef=\"let sensor\"> \n                        <span class=\"mbox_actionable\">\n                          <mat-icon [hidden]=\"!sensor.active || activeUpdateEvent\" style=\"color:#ff4081\" (click)=\"sendDeactiveSensor(sensor)\">toggle_on</mat-icon>\n                          <mat-icon [hidden]=\"sensor.active || activeUpdateEvent\" style=\"color: gray;\" (click)=\"sendActiveSensor(sensor)\">toggle_off</mat-icon>\n                          <mat-icon [hidden]=\"!activeUpdateEvent\" class=\"loader\">flip_camera_android</mat-icon>\n                        </span>\n\n                        \n                      </td>\n                    </ng-container>\n                \n                    <!-- accessProtocol Column -->\n                    <ng-container matColumnDef=\"accessProtocol\">\n                      <th mat-header-cell *matHeaderCellDef mat-sort-header sortActionDescription=\"Sort by accessProtocol\"> AccessProtocol </th>\n                      <td mat-cell *matCellDef=\"let sensor\"> {{sensor.accessProtocol}} </td>\n                    </ng-container>\n  \n                    <!-- Controls -->\n                    <ng-container matColumnDef=\"controls\">\n                      <th mat-header-cell *matHeaderCellDef>  </th>\n                      <td mat-cell *matCellDef=\"let sensor\"> \n                        <!--app-link-patient-form mode=\"icon\" [sensor]=\"sensor\" (submitInfo)=\"onEditEvent($event)\"></app-link-patient-form>\n                        <app-del-patient-button [patient]=\"patient\" (submitInfo)=\"onEditEvent($event)\"></app-del-patient-button-->  \n                        <app-link-recorder-form mode=\"icon\" [sensor]=\"sensor\" [filelist]=\"RECORD_FILES\" [error]=\"showError\" (submitObject)=\"submitSensor($event)\" (submitInfo)=\"onEditEvent($event)\"></app-link-recorder-form>\n                        <app-link-sensor-form mode=\"icon\" title=\"Edit Sensor\" [sensor]=\"sensor\" [success]=\"submitSuccess\" [error]=\"showError\" (submitObject)=\"submitSensor($event)\" (submitInfo)=\"onEditEvent($event)\"></app-link-sensor-form>\n                        <app-del-sensor-button [sensor]=\"sensor\" [success]=\"submitSuccess\" [error]=\"showError\" (confirmDeletion)=\"sendDeleteSensor(sensor)\" (submitInfo)=\"onEditEvent($event)\"></app-del-sensor-button>\n                      </td>\n                    </ng-container>\n                \n                    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n                    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n                  </table>\n                \n                  <mat-paginator [pageSizeOptions]=\"[5, 10, 20]\"\n                                 showFirstLastButtons\n                                 aria-label=\"Select page of Sensors\">\n                  </mat-paginator>\n                </div>\n                \n          </div>\n      </div>\n  </div>","import { Recorder } from \"../interfaces/sensor\";\n\nexport class AccSensor {\n\n    uuid: string;\n    name: string;\n    transducerType:string;\n    physicalDimension:string;\n    physicalMin:number;\n    physicalMax:number;\n    digitalMin:number;\n    digitalMax:number;\n    xLocation:number;\n    yLocation:number;\n    yDimension:string;\n    xDimension:string;\n    active:boolean;\n    accessProtocol:string;\n    portAddress:string;\n    recorder:Recorder;\n    \n\n    constructor(){\n        this.uuid = \"\";\n        this.name = \"\";\n        this.transducerType = \"ACC\";\n        this.physicalDimension = \"V\";\n        this.physicalMin = -5;\n        this.physicalMax = 5;\n        this.digitalMin = -2048;\n        this.digitalMax = 2047;\n        this.xLocation = 0;\n        this.yLocation = 0;\n        this.yDimension = \"5\";\n        this.xDimension = \"5\";\n        this.active = true;\n        this.accessProtocol = \"I2C\";\n        this.portAddress = \"0\";\n        this.recorder = {\n            command: \"\",\n            filepath:\"\",\n            streamer: false,\n            description:\"\"\n        };\n    }\n}\n","import { Recorder, Sensor } from \"../interfaces/sensor\";\n\nexport class CustomSensor implements Sensor {\n    uuid: string =\"\";\n    name: string =\"\";\n    transducerType: string =\"CUSTOM\";\n    physicalDimension: string =\"\";\n    physicalMin: number =0;\n    physicalMax: number=0;\n    digitalMin: number=0;\n    digitalMax: number=0;\n    xLocation: number=0;\n    yLocation: number=0;\n    yDimension: string =\"\";\n    xDimension: string =\"\";\n    active: boolean = true;\n    accessProtocol: string =\"\";\n    portAddress: string =\"\";\n    recorder: Recorder = {\n        command: \"\",\n        filepath:\"\",\n        description:\"\"\n    };\n\n    constructor(){}\n}\n","import { Recorder, Sensor } from \"../interfaces/sensor\";\n\nexport class FSRSensor implements Sensor {\n    \n\n    uuid:string = \"\";\n    name:string = \"\";\n    transducerType:string = \"FSR\";\n    physicalDimension:string = \"V\";\n    physicalMin:number = -5;\n    physicalMax:number = 5;\n    digitalMin:number = -2048;\n    digitalMax:number = 2047;\n    xLocation:number = 0;\n    yLocation:number = 0;\n    yDimension:string = \"5\";\n    xDimension:string = \"5\";\n    active:boolean = true;\n    accessProtocol:string = \"I2C\";\n    portAddress:string = \"0\";\n    recorder = {\n        command: \"\",\n        filepath:\"\",\n        description:\"\"\n    };\n\n    constructor(){}\n    \n}\n","import { Recorder, Sensor } from \"../interfaces/sensor\";\n\nexport class IMUSensor implements Sensor{\n\n    uuid: string;\n    name: string;\n    transducerType:string;\n    physicalDimension:string;\n    physicalMin:number;\n    physicalMax:number;\n    digitalMin:number;\n    digitalMax:number;\n    xLocation:number;\n    yLocation:number;\n    yDimension:string;\n    xDimension:string;\n    active:boolean;\n    accessProtocol:string;\n    portAddress:string;\n    recorder:Recorder;\n    \n\n    constructor(){\n        this.uuid = \"\";\n        this.name = \"\";\n        this.transducerType = \"IMU\";\n        this.physicalDimension = \"V\";\n        this.physicalMin = -5;\n        this.physicalMax = 5;\n        this.digitalMin = -2048;\n        this.digitalMax = 2047;\n        this.xLocation = 0;\n        this.yLocation = 0;\n        this.yDimension = \"5\";\n        this.xDimension = \"5\";\n        this.active = true;\n        this.accessProtocol = \"I2C\";\n        this.portAddress = \"0\";\n        this.recorder = {\n            command: \"\",\n            filepath:\"\",\n            description:\"\"\n        };\n    }\n}\n","import { Recorder } from \"../interfaces/sensor\";\n\nexport class PtzSensor {\n\n    uuid: string;\n    name: string;\n    transducerType:string;\n    physicalDimension:string;\n    physicalMin:number;\n    physicalMax:number;\n    digitalMin:number;\n    digitalMax:number;\n    xLocation:number;\n    yLocation:number;\n    yDimension:string;\n    xDimension:string;\n    active:boolean;\n    accessProtocol:string;\n    portAddress:string;\n    recorder:Recorder;\n    \n\n    constructor(){\n        this.uuid = \"\";\n        this.name = \"\";\n        this.transducerType = \"PTZ\";\n        this.physicalDimension = \"V\";\n        this.physicalMin = -5;\n        this.physicalMax = 5;\n        this.digitalMin = -2048;\n        this.digitalMax = 2047;\n        this.xLocation = 0;\n        this.yLocation = 0;\n        this.yDimension = \"5\";\n        this.xDimension = \"5\";\n        this.active = true;\n        this.accessProtocol = \"I2C\";\n        this.portAddress = \"0\";\n        this.recorder = {\n            command: \"\",\n            streamer: false,\n            filepath:\"\",\n            description:\"\"\n        };\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BackendmapService {\n\n\n  private BASE_URL: string = environment.backend_url;\n\n  /** Patient infromation */\n  GET_PATIENT_DATA = this.BASE_URL.concat(\"/users/patients\");\n  POST_PATIENT_DATA = this.BASE_URL.concat(\"/users/patient\");\n  private DELETE_PATIENT_DATA = this.BASE_URL.concat(\"/users/delete/\");//{uuid}\n  public DELETE_PATIENT_URL(uuid:string):string{\n    return this.DELETE_PATIENT_DATA.concat(uuid);\n  }\n  GET_RANDOM_UUID_URL = this.BASE_URL.concat(\"/users/randomuuid\");\n  /** Devices information */\n  GET_DEVICES_LIST = this.BASE_URL.concat(\"/devices/dto\");\n  POST_DEVICE_DATA = this.BASE_URL.concat(\"/devices/add\");\n  PUT_DEVICE_DATA = this.BASE_URL.concat(\"/devices/add\");\n  /** Sensor Information */\n  private GET_SENSOR_LIST = this.BASE_URL.concat(\"/devices/sensors\");//{uuid}\n  public GET_DEVICE_SENSOR_URL(uuid:string):string{\n    return this.GET_SENSOR_LIST.concat(\"/\"+uuid);\n  }\n  /** Recording Information */\n  public GET_RECORDING_LIST = this.BASE_URL.concat(\"/recordings/\");//device/{deviceuuid}\n  public GET_DEVICE_RECORDINGS_URL(device_uuid:string):string{\n    return this.GET_RECORDING_LIST.concat('device/').concat(device_uuid);\n  }\n  private GET_DATARECORDS = this.BASE_URL.concat(\"/recordings/datarecords/zip/\");//{recuuid}\n  public GET_RAW_DATARECORDS_URL(recording_uuid:string){\n    return this.GET_DATARECORDS.concat(\"raw/\").concat(recording_uuid);\n  }\n  public GET_FORMAT_DATARECORDS_URL(format:string,recording_uuid:string){\n    return this.GET_DATARECORDS.concat(format).concat(\"/\").concat(recording_uuid);\n  }\n\n  constructor() { }\n}\n","import { Injectable } from '@angular/core';\nimport { Selector } from '../interfaces/selector';\n\nconst heightUnits: Selector[] = [\n  {value: 'centimeters', viewValue: 'cm'},\n  {value: 'meters', viewValue: 'mt'},\n  {value: 'inches', viewValue: 'inch'},\n  {value: 'feets', viewValue: 'ft'},\n];\n\nconst weightUnits: Selector[] = [\n  {value: 'kilograms', viewValue: 'Kg'},\n  {value: 'grams', viewValue: 'gr'},\n  {value: 'pounds', viewValue: 'lbs'},\n  {value: 'ounces', viewValue: 'Oz'},\n];\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GlobalUtilService {\n\n  hunits = heightUnits;\n  wunits = weightUnits;\n\n  constructor() { }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpResponse, HttpParams, HttpErrorResponse } from '@angular/common/http';\nimport { SessionService } from './session.service';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RequestService {\n  \n  ResponseContentType: any = {\n    Json: 'JSON',\n    JsonHeader: 'application/json;odata=verbose;charset=utf-8',\n    Xml:  'XML'\n  };\n  authHeader: any;\n\n  constructor(private http: HttpClient, private session: SessionService) {\n    const token = session.getSessionDeviceData()? JSON.stringify(session.getSessionDeviceData()?.token):'';\n    this.authHeader = {'device':token, 'ContentType':this.ResponseContentType.JsonHeader};\n   }\n\n  /**\n   *\n   * @param url Send GET to backend\n   */\n  sendBackendGet(url: string, validacion?: string): Observable<any>{\n    let headers = new HttpHeaders( this.authHeader);\n    const httpOptions = {\n      responseType: this.ResponseContentType.Json,\n      headers: headers\n    }; /** */\n\n    return this.http.get( url, httpOptions)\n    .pipe(\n        catchError(this.handleError)\n      );\n  }\n  \n  /**\n   * Send POST to backend\n   */\n  sendBackendPost(url: string, body: any, validacion?: string): Observable<any>{\n    let headers = new HttpHeaders( this.authHeader);\n    const httpOptions = {\n      responseType: this.ResponseContentType.Json,\n      headers: headers\n    }; /** */\n\n    return this.http.post(url, body, httpOptions)\n    .pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  /**\n   * Send PUT to backend\n   */\n  sendBackendPut(url: string, body: any, validacion?: string): Observable<any>{\n    let headers = new HttpHeaders(  this.authHeader);\n    const httpOptions = {\n      responseType: this.ResponseContentType.Json,\n      headers: headers\n    }; /** */\n\n    return this.http.put(url, body, httpOptions)\n    .pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  /**\n   *\n   * @param url send DELETE to backend\n   * @param body\n   */\n  sendBackendDelete(url: string, validacion?: string): Observable<any>{\n    let headers = new HttpHeaders(  this.authHeader);\n    const httpOptions = {\n      responseType: this.ResponseContentType.Json,\n      headers: headers\n    };/** */\n    return this.http.delete(url,httpOptions)\n    .pipe(\n      catchError(this.handleError)\n    );\n\n  }\n\n  /**\n   * handle errors from HTTP request\n   */\n  handleError(error: HttpErrorResponse) {\n    if (error.error instanceof ErrorEvent) {\n      // Access error\n      console.error('Request operation failed.', error);\n    }else{\n      // Error response from backend server\n      console.error(\n        `Backend returned code ${error.status}, ` +\n        `body was: ${error.error}`);\n    }\n    // Return an observable with a user-facing error message.\n    return throwError( () => new Error(error.status + '-' + error.message) );\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { RxStompConfig, RxStomp } from '@stomp/rx-stomp';\nimport { environment } from 'src/environments/environment';\n\n//Configuration\nexport const myRxStompConfig: RxStompConfig = {\n  // server\n  brokerURL: environment.backend_ws,\n\n  // Headers\n  // Typical keys: login, passcode, host\n  connectHeaders: {\n    login: '',\n    passcode: '',\n  },\n\n  // How often to heartbeat (milliseconds) - 0 to disable\n  heartbeatIncoming: 0, // Typical value 0 - disabled\n  heartbeatOutgoing: 20000, // Typical value 20000 - every 20 seconds\n\n  // Wait in milliseconds before attempting auto reconnect\n  // Set to 0 to disable\n  // Typical value 500 (500 milli seconds)\n  reconnectDelay: 30*1000,\n\n  // Will log diagnostics on console\n  // It can be quite verbose, not recommended in production\n  // Skip this key to stop logging to console\n  debug: (msg: string): void => {\n    console.log(new Date(), msg);\n  },\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxStompService extends RxStomp {\n\n  constructor() { super(); }\n}\n\n//singleton\nconst rxStomp:RxStompService = new RxStompService();\n\nexport function rxStompServiceFactory() {\n  //const rxStomp = new RxStompService();\n  rxStomp.configure(myRxStompConfig);\n  rxStomp.activate();\n  return rxStomp;\n}\n\nexport function rxStompServiceDestroy(){\n  rxStomp.deactivate();\n}\n","import { Injectable } from '@angular/core';\n\nimport { Router } from '@angular/router';\nimport { Subject, BehaviorSubject, Observable } from 'rxjs';\nimport { Device } from '../interfaces/device';\nimport { RxStompService } from './rx-stomp.service';\n\n//singleton\nexport class SessionMngr {\n  private device = new Subject<any>();\n  public deviceObserver = this.device.asObservable();\n  private sessview = new Subject<string>();\n  public sessviewObserver = this.sessview.asObservable();\n\n  private _queryMode: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n  public isOnQueryObs: Observable<boolean> = this._queryMode.asObservable();\n\n  constructor(){\n    var box = sessionStorage.getItem(\"MBX_CURRENTDEVICE\");\n    if(box != null && box != 'undefined'){\n      let rawData: string = atob(box);\n      const encoder = new TextEncoder();\n      //rawData = Buffer.from(rawData,'base64').toString('utf8'); // Buffer.from(data).toString('base64');\n      let data = JSON.parse(rawData)\n      this.device.next(data);\n    }\n  }\n\n  set ActiveDevice(val:Device|null) {\n    //if null deletes all session data\n    if(val == null){\n      sessionStorage.clear();\n    }else{\n      //var encoded = Buffer.from(JSON.stringify(val)).toString('base64');\n      var encoded =btoa(JSON.stringify(val))\n      sessionStorage.setItem(\"MBX_CURRENTDEVICE\", encoded);\n      this.device.next(val);\n    }    \n  }\n\n  get ActiveDevice(): Device|null {\n    var box = sessionStorage.getItem(\"MBX_CURRENTDEVICE\");\n    if(box != null && box != 'undefined'){\n      let rawData: string = atob(box);\n      //rawData = Buffer.from(rawData,'base64').toString('utf8');\n      let data = JSON.parse(rawData)\n      this.device.next(data);\n\n      return data;      \n    }else{\n\n      return null;\n    }    \n  }\n\n  observerForActiveDevice(): Observable<any>{\n    return this.deviceObserver;\n  }\n\n  sessionExist(): boolean{\n    return !(sessionStorage.getItem(\"MBX_CURRENTDEVICE\")===null);\n  }\n\n  setQueryMode():void{\n    this._queryMode.next(true);\n  }\n  unsetQueryMode():void{\n    this._queryMode.next(false);\n  }\n\n}\nexport const sessionMngr = new SessionMngr();\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SessionService {\n\n  public sessionManager = sessionMngr;\n  public _rxStomp!: RxStompService;\n\n  constructor(private _router:Router) { }\n\n  startSession(device: Device, rxStomp:RxStompService|null =null) {\n    this.sessionManager.ActiveDevice = device;\n    console.log(\"Session created\"+this.sessionManager.ActiveDevice);\n    this._router.navigate([ {outlets: {primary:'connecteddevice'} } ]);\n    if(rxStomp != null){\n      this._rxStomp = rxStomp;\n    }\n  }\n\n  getSessionDeviceData(): Device|null{\n    return this.sessionManager.ActiveDevice;\n  }\n\n  isSessionStarted(): boolean{\n    return this.sessionManager.sessionExist();\n  }\n\n  toHome():void {\n    this._router.navigate([ {outlets: {primary:'home'} } ]);\n  }\n\n  toPath(path:string): void{\n    this._router.navigate([ {outlets: {primary:path} } ]);\n  }\n\n  closeSession():void {\n    this.sessionManager.ActiveDevice = null; \n    if(this._rxStomp != null){\n      this._rxStomp.deactivate();\n    }\n    this.toHome();\n  }\n\n  setShowQuery() :void{\n    this.sessionManager.setQueryMode();\n  }\n  setEndQuery(): void{\n    this.sessionManager.unsetQueryMode();\n  }\n\n}\n","export const environment = {\n    production: false,\n    testing: true,\n    backend_url: \"http://141.37.168.27:8080/morpheusagent\",\n    backend_ws: \"ws://141.37.168.27:8080/morpheusagent-websocket\"\n};\n","/// <reference types=\"@angular/localize\" />\n\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport 'hammerjs';\n\nimport { AppModule } from './app/app.module';\n\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"names":["RouterModule","PatientsPageComponent","DevicesPageComponent","SensorsPageComponent","RecordingsPageComponent","EditDeviceFormComponent","routes","path","redirectTo","pathMatch","component","AppRoutingModule","_","_2","_3","forRoot","imports","i1","exports","i0","ɵɵelement","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","AppComponent","constructor","_session","_rxStomp","title","disconectDevice","event","console","log","closeSession","getSessionDeviceUUID","uuid","isSessionStarted","dev","getSessionDeviceData","ɵɵdirectiveInject","SessionService","i2","RxStompService","selectors","decls","vars","consts","template","AppComponent_Template","rf","ctx","ɵɵlistener","AppComponent_Template_button_click_4_listener","ɵɵrestoreView","_r5","_r2","ɵɵreference","ɵɵresetView","toggle","ɵɵtemplate","AppComponent_mat_progress_bar_9_Template","AppComponent_mat_list_item_24_Template","AppComponent_mat_list_item_25_Template","AppComponent_Template_button_click_48_listener","$event","ɵɵadvance","ɵɵproperty","_r0","ɵɵpipeBind1","sessionManager","isOnQueryObs","ɵɵtextInterpolate1","BrowserModule","HttpClientModule","FormsModule","ReactiveFormsModule","BrowserAnimationsModule","NgbModule","MatSidenavModule","MatToolbarModule","MatIconModule","MatDividerModule","MatProgressBarModule","MatRadioModule","MatCardModule","ClipboardModule","MatProgressSpinnerModule","MatSlideToggleModule","MatListModule","MatTableModule","MatPaginatorModule","MatSortModule","MatChipsModule","MatRippleModule","MatFormFieldModule","MatSelectModule","MatInputModule","MatButtonModule","MatTooltipModule","MatSnackBarModule","MatAutocompleteModule","MatCheckboxModule","MatMenuModule","NgbPopoverModule","PatientDataTableComponent","LinkPatientFormComponent","DelPatientButtonComponent","DeviceCardComponent","SensorsDataTableComponent","RecordingsDataTableComponent","BedCanvasComponent","LinkSensorFormComponent","DelSensorButtonComponent","RecordingControlsComponent","LinkDownloadDataFormComponent","LinkRecorderFormComponent","AppModule","bootstrap","declarations","MatPaginator","MatSort","MatTableDataSource","interval","rxStompServiceDestroy","rxStompServiceFactory","DevicesPageComponent_div_30_Template_app_device_card_submitInfo_2_listener","_r3","ctx_r2","ɵɵnextContext","onMessageEvent","device_r1","isOnline","ctx_r0","showOffline","_request","_backend","_snackBar","showError","datacount","DEVICE_DATA","ngOnInit","sendBackendGet","GET_DEVICES_LIST","subscribe","next","res","response","JSON","parse","infoMessage","undefined","errorMessage","error","message","dataSource","length","paginator","err","complete","setEndQuery","setInfoSubscriber","ngOnDestroy","getPageFromDataSource","deviceList","_pageData","secondsCounter","subscriber","n","unsubscribe","removeInfoMssg","removeErrorMssg","open","duration","RequestService","BackendmapService","i3","MatSnackBar","i4","viewQuery","DevicesPageComponent_Query","provide","useFactory","DevicesPageComponent_Template","DevicesPageComponent_Template_mat_chip_option_removed_11_listener","DevicesPageComponent_Template_mat_chip_option_removed_16_listener","DevicesPageComponent_Template_mat_slide_toggle_ngModelChange_24_listener","DevicesPageComponent_div_30_Template","ɵɵpureFunction0","_c0","openSnackBar","PatientsPageComponent_Template","activeDevice","name","RecordingsPageComponent_Template","RecordingsPageComponent_span_4_Template","RecordingsPageComponent_Template_app_recordings_data_table_submitInfo_12_listener","SensorsPageComponent_app_sensors_data_table_12_Template_app_sensors_data_table_submitInfo_0_listener","ctx_r1","currentDevice","activeSession","features","ɵɵProvidersFeature","SensorsPageComponent_Template","SensorsPageComponent_span_4_Template","SensorsPageComponent_app_sensors_data_table_12_Template","EventEmitter","ɵɵtextInterpolate","ctx_r5","device","BedCanvasComponent_ng_template_0__svg_svg_20__svg_circle_3_Template__svg_circle_click_0_listener","restoredCtx","_r16","s_r14","$implicit","ctx_r15","setEditable","_r8","ɵɵattribute","ctx_r10","measureToPixels","xLocation","yLocation","magnifyMagnitude","xDimension","ctx_r11","s_r17","yDimension","BedCanvasComponent_ng_template_0__svg_svg_20__svg_rect_5_Template__svg_rect_click_0_listener","_r20","s_r18","ctx_r19","ctx_r12","ctx_r13","s_r21","ɵɵnamespaceSVG","BedCanvasComponent_ng_template_0__svg_svg_20__svg_circle_3_Template","BedCanvasComponent_ng_template_0__svg_svg_20__svg_text_4_Template","BedCanvasComponent_ng_template_0__svg_svg_20__svg_rect_5_Template","BedCanvasComponent_ng_template_0__svg_svg_20__svg_text_6_Template","ctx_r6","getBedDeviceStyle","getViewBoxValues","width","height","getStringBedDimensions","getFilteredSensorList","sensorList","BedCanvasComponent_ng_template_0_div_25_Template_mat_icon_click_15_listener","_r23","ctx_r22","sendDeactiveSensor","currentEditable","BedCanvasComponent_ng_template_0_div_25_Template_mat_icon_click_17_listener","ctx_r24","sendActiveSensor","ctx_r9","active","updateEvent","BedCanvasComponent_ng_template_0_span_3_Template","BedCanvasComponent_ng_template_0_Template_button_click_4_listener","_r26","modal_r4","dismiss","BedCanvasComponent_ng_template_0__svg_svg_20_Template","BedCanvasComponent_ng_template_0_div_25_Template","BedCanvasComponent_ng_template_0_Template_button_click_27_listener","close","renderReady","BedCanvasComponent_img_4_Template_img_click_0_listener","_r29","ctx_r28","showModal","picture_path","ɵɵsanitizeUrl","BedCanvasComponent_button_5_Template_button_click_0_listener","_r31","ctx_r30","modalService","mode","submitObject","bedStyle","viewBoxStyle","sensor","ngOnChanges","changes","list","currentValue","xBedDimension","yBedDimension","print","value","content","modalDialogClass","scrollable","centered","size","type","fsrList","filter","transducerType","toUpperCase","x","toString","y","unit","bedDimensionUnits","label","add","substract","dpi","window","devicePixelRatio","pixel","times","result","concat","style","Number","viewbox","NgbModal","inputs","outputs","ɵɵNgOnChangesFeature","BedCanvasComponent_Template","BedCanvasComponent_ng_template_0_Template","ɵɵtemplateRefExtractor","BedCanvasComponent_img_4_Template","BedCanvasComponent_button_5_Template","DelPatientButtonComponent_ng_template_0_Template_button_click_5_listener","modalClose","DelPatientButtonComponent_ng_template_0_Template_button_click_15_listener","ctx_r4","DelPatientButtonComponent_ng_template_0_Template_button_click_17_listener","requestDelete","ɵɵtextInterpolate2","patient","config","_util","submitInfo","warnMessage","errorEvent","backdrop","keyboard","modalOpen","dismissAll","setShowQuery","sendBackendDelete","DELETE_PATIENT_URL","emit","NgbModalConfig","i5","GlobalUtilService","DelPatientButtonComponent_Template","DelPatientButtonComponent_ng_template_0_Template","DelPatientButtonComponent_Template_button_click_2_listener","_r6","DelSensorButtonComponent_ng_template_0_Template_button_click_5_listener","DelSensorButtonComponent_ng_template_0_Template_button_click_17_listener","DelSensorButtonComponent_ng_template_0_Template_button_click_19_listener","additional_message","confirmDeletion","confirmEvent","success","DelSensorButtonComponent_Template","DelSensorButtonComponent_ng_template_0_Template","DelSensorButtonComponent_Template_button_click_2_listener","queryCounterThreshold","actionControls","recordingInProgress","queryInProgress","brokerFail","stompSubscriber","connected$","state","queueSubscription","watch","body","params","PARAMS","ACTION","querySubscriber","newOnlineSubscription","newDevice","pingDevice","requestConnectionToken","deviceEvent","current","ngAfterContentInit","aliveSubscriber","connected","command","stringify","publish","destination","startQueryCounter","requestRecordingStatus","queueName","queryCounter","showActionControls","toRecordings","connectDevice","toPath","startSession","startRecording","stopRecording","showRecordingInfo","DeviceCardComponent_Template","DeviceCardComponent_Template_app_recording_controls_startEvent_23_listener","DeviceCardComponent_Template_app_recording_controls_stopEvent_23_listener","DeviceCardComponent_Template_button_click_26_listener","DeviceCardComponent_Template_button_click_31_listener","DeviceCardComponent_Template_button_click_35_listener","DeviceCardComponent_Template_button_click_39_listener","patientDto","ɵɵtextInterpolate3","isRecording","ɵɵpipeBind2","lastOnline","FormControl","FormGroup","map","startWith","type_r6","EditDeviceFormComponent_mat_option_61_Template_mat_option_onSelectionChange_0_listener","_r9","ctx_r8","setPatient","patient_r7","stringifyPatientOption","unit_r10","viewValue","_formBuilder","isNewDevice","PATIENT_DATA","patientSelectorFC","isPatientAssigned","typesFC","deviceTypes","toHome","getPatientData","initDeviceForm","alias","deviceForm","disabled","patient_uuid","patientUuid","GET_PATIENT_DATA","patientDataSource","setValue","emitEvent","filteredPatients","valueChanges","pipe","_filterPatient","filterValue","toLowerCase","filteredData","data","actualSubmit","sendBackendPut","PUT_DEVICE_DATA","option","source","patientControl","uuidControl","setControl","onSubmit","invalid","getRawValue","resetForm","FormBuilder","i6","EditDeviceFormComponent_Template","EditDeviceFormComponent_Template_form_ngSubmit_0_listener","EditDeviceFormComponent_span_5_Template","EditDeviceFormComponent_Template_mat_chip_option_removed_14_listener","EditDeviceFormComponent_Template_mat_chip_option_removed_19_listener","EditDeviceFormComponent_mat_option_49_Template","EditDeviceFormComponent_mat_option_61_Template","EditDeviceFormComponent_option_72_Template","EditDeviceFormComponent_Template_button_click_92_listener","_r1","hunits","recording","LinkDownloadDataFormComponent_ng_template_0_span_3_Template","LinkDownloadDataFormComponent_ng_template_0_Template_button_click_4_listener","modal_r5","LinkDownloadDataFormComponent_ng_template_0_Template_mat_radio_group_ngModelChange_13_listener","format","LinkDownloadDataFormComponent_ng_template_0_Template_button_click_21_listener","openFiletab","LinkDownloadDataFormComponent_ng_template_0_Template_button_click_26_listener","LinkDownloadDataFormComponent_button_4_Template_button_click_0_listener","_r13","LinkDownloadDataFormComponent_button_5_Template_button_click_0_listener","_r15","ctx_r14","LinkDownloadDataFormComponent_button_6_Template_button_click_0_listener","_r17","ctx_r16","recording_uuid","GET_FORMAT_DATARECORDS_URL","LinkDownloadDataFormComponent_Template","LinkDownloadDataFormComponent_ng_template_0_Template","LinkDownloadDataFormComponent_button_4_Template","LinkDownloadDataFormComponent_button_5_Template","LinkDownloadDataFormComponent_button_6_Template","unit_r7","unit_r8","LinkPatientFormComponent_ng_template_0_Template_form_ngSubmit_0_listener","_r10","LinkPatientFormComponent_ng_template_0_Template_button_click_6_listener","LinkPatientFormComponent_ng_template_0_option_53_Template","LinkPatientFormComponent_ng_template_0_Template_a_click_57_listener","showUnits","LinkPatientFormComponent_ng_template_0_option_73_Template","LinkPatientFormComponent_ng_template_0_Template_a_click_77_listener","LinkPatientFormComponent_ng_template_0_Template_button_click_80_listener","patientForm","getHUnitValue","editHunit","unitChangerLabel","getWUnitValue","editWunit","wunits","valid","LinkPatientFormComponent_button_2_Template_button_click_0_listener","LinkPatientFormComponent_button_3_Template_button_click_0_listener","_r18","ctx_r17","LinkPatientFormComponent_button_4_Template_button_click_0_listener","initPatientForm","patientEvent","modalReference","fullscreen","markAsUntouched","age","heightUnit","weight","weightUnit","form","sendBackendPost","POST_PATIENT_DATA","reset","LinkPatientFormComponent_Template","LinkPatientFormComponent_ng_template_0_Template","LinkPatientFormComponent_button_2_Template","LinkPatientFormComponent_button_3_Template","LinkPatientFormComponent_button_4_Template","LinkRecorderFormComponent_ng_template_0_mat_option_31_Template_mat_option_onSelectionChange_0_listener","ctx_r7","setFile","file_r6","LinkRecorderFormComponent_ng_template_0_Template_button_click_6_listener","LinkRecorderFormComponent_ng_template_0_span_28_Template","LinkRecorderFormComponent_ng_template_0_mat_option_31_Template","LinkRecorderFormComponent_ng_template_0_Template_button_click_60_listener","LinkRecorderFormComponent_ng_template_0_Template_button_click_62_listener","recorderForm","filesFC","_r4","currentFiles","LinkRecorderFormComponent_button_2_Template_button_click_0_listener","_r14","FILE_LIST","initSensorForm","_filterFiles","get","patchValue","filelist","filename","includes","recorder","filepath","streamer","description","LinkRecorderFormComponent_Template","LinkRecorderFormComponent_ng_template_0_Template","LinkRecorderFormComponent_button_2_Template","CustomSensor","FSRSensor","IMUSensor","PtzSensor","AccSensor","templateFC","LinkSensorFormComponent_ng_template_0_div_23_Template_button_click_1_listener","getRandomUUID","getCurrentSensorUUID","LinkSensorFormComponent_ng_template_0_mat_option_46_Template_mat_option_onSelectionChange_0_listener","setType","type_r14","physicalDimension","LinkSensorFormComponent_ng_template_0_Template_button_click_6_listener","LinkSensorFormComponent_ng_template_0_div_13_Template","LinkSensorFormComponent_ng_template_0_div_23_Template","LinkSensorFormComponent_ng_template_0_div_24_Template","LinkSensorFormComponent_ng_template_0_mat_option_46_Template","LinkSensorFormComponent_ng_template_0_span_63_Template","LinkSensorFormComponent_ng_template_0_span_71_Template","LinkSensorFormComponent_ng_template_0_Template_button_click_135_listener","LinkSensorFormComponent_ng_template_0_Template_button_click_137_listener","ctx_r20","sensorForm","isNewSensor","suportedTypes","LinkSensorFormComponent_button_2_Template_button_click_0_listener","_r22","ctx_r21","LinkSensorFormComponent_button_3_Template_button_click_0_listener","_r24","ctx_r23","LinkSensorFormComponent_button_4_Template_button_click_0_listener","ctx_r25","DATA_TYPES","selection","_filterTypes","SensorEvent","physicalMin","physicalMax","digitalMin","digitalMax","accessProtocol","portAddress","comand","exec_path","uuid_value","defaultSensor","current_uuid","GET_RANDOM_UUID_URL","LinkSensorFormComponent_Template","LinkSensorFormComponent_ng_template_0_Template","LinkSensorFormComponent_button_2_Template","LinkSensorFormComponent_button_3_Template","LinkSensorFormComponent_button_4_Template","patient_r20","patient_r21","patient_r22","patient_r23","patient_r24","patient_r25","patient_r26","patient_r27","PatientDataTableComponent_td_51_Template_app_link_patient_form_submitInfo_1_listener","_r30","ctx_r29","onEditEvent","PatientDataTableComponent_td_51_Template_app_del_patient_button_submitInfo_2_listener","ctx_r31","patient_r28","displayedColumns","ngAfterViewInit","sort","reloadData","PatientDataTableComponent_Query","PatientDataTableComponent_Template_mat_chip_option_removed_4_listener","PatientDataTableComponent_Template_mat_chip_option_removed_9_listener","PatientDataTableComponent_Template_button_click_16_listener","PatientDataTableComponent_Template_app_link_patient_form_submitInfo_20_listener","ɵɵelementContainerStart","PatientDataTableComponent_th_26_Template","PatientDataTableComponent_td_27_Template","ɵɵelementContainerEnd","PatientDataTableComponent_th_29_Template","PatientDataTableComponent_td_30_Template","PatientDataTableComponent_th_32_Template","PatientDataTableComponent_td_33_Template","PatientDataTableComponent_th_35_Template","PatientDataTableComponent_td_36_Template","PatientDataTableComponent_th_38_Template","PatientDataTableComponent_td_39_Template","PatientDataTableComponent_th_41_Template","PatientDataTableComponent_td_42_Template","PatientDataTableComponent_th_44_Template","PatientDataTableComponent_td_45_Template","PatientDataTableComponent_th_47_Template","PatientDataTableComponent_td_48_Template","PatientDataTableComponent_th_50_Template","PatientDataTableComponent_td_51_Template","PatientDataTableComponent_tr_52_Template","PatientDataTableComponent_tr_53_Template","startEvent","stopEvent","RecordingControlsComponent_Template","RecordingControlsComponent_Template_a_click_1_listener","RecordingControlsComponent_Template_a_click_3_listener","RecordingControlsComponent_Template_a_click_5_listener","rec_r14","rec_r15","registeredDevice","rec_r16","startDate","rec_r17","stopdate","rec_r18","rec_r19","RECORDING_DATA","requestRecordingInfo","recordings_end_point","GET_DEVICE_RECORDINGS_URL","GET_RECORDING_LIST","RecordingsDataTableComponent_Query","RecordingsDataTableComponent_Template_mat_chip_option_removed_4_listener","RecordingsDataTableComponent_Template_mat_chip_option_removed_9_listener","RecordingsDataTableComponent_Template_button_click_16_listener","RecordingsDataTableComponent_th_25_Template","RecordingsDataTableComponent_td_26_Template","RecordingsDataTableComponent_th_28_Template","RecordingsDataTableComponent_td_29_Template","RecordingsDataTableComponent_th_31_Template","RecordingsDataTableComponent_td_32_Template","RecordingsDataTableComponent_th_34_Template","RecordingsDataTableComponent_td_35_Template","RecordingsDataTableComponent_th_37_Template","RecordingsDataTableComponent_td_38_Template","RecordingsDataTableComponent_th_40_Template","RecordingsDataTableComponent_td_41_Template","RecordingsDataTableComponent_tr_42_Template","RecordingsDataTableComponent_tr_43_Template","sensor_r14","sensor_r15","sensor_r16","SensorsDataTableComponent_td_39_Template_mat_icon_click_2_listener","_r19","sensor_r17","ctx_r18","SensorsDataTableComponent_td_39_Template_mat_icon_click_4_listener","activeUpdateEvent","sensor_r21","SensorsDataTableComponent_td_45_Template_app_link_recorder_form_submitObject_1_listener","submitSensor","SensorsDataTableComponent_td_45_Template_app_link_recorder_form_submitInfo_1_listener","SensorsDataTableComponent_td_45_Template_app_link_sensor_form_submitObject_2_listener","ctx_r26","SensorsDataTableComponent_td_45_Template_app_link_sensor_form_submitInfo_2_listener","ctx_r27","SensorsDataTableComponent_td_45_Template_app_del_sensor_button_confirmDeletion_3_listener","sensor_r22","sendDeleteSensor","SensorsDataTableComponent_td_45_Template_app_del_sensor_button_submitInfo_3_listener","RECORD_FILES","submitSuccess","SENSOR_DATA","origin","requestRecorderFileInfo","requestSensorList","sendAddSensor","requestSensorInfo","GET_DEVICE_SENSOR_URL","SensorsDataTableComponent_Query","SensorsDataTableComponent_Template_mat_chip_option_removed_4_listener","SensorsDataTableComponent_Template_mat_chip_option_removed_9_listener","SensorsDataTableComponent_Template_button_click_19_listener","SensorsDataTableComponent_Template_app_link_sensor_form_submitObject_23_listener","SensorsDataTableComponent_Template_app_link_sensor_form_submitInfo_23_listener","SensorsDataTableComponent_th_29_Template","SensorsDataTableComponent_td_30_Template","SensorsDataTableComponent_th_32_Template","SensorsDataTableComponent_td_33_Template","SensorsDataTableComponent_th_35_Template","SensorsDataTableComponent_td_36_Template","SensorsDataTableComponent_th_38_Template","SensorsDataTableComponent_td_39_Template","SensorsDataTableComponent_th_41_Template","SensorsDataTableComponent_td_42_Template","SensorsDataTableComponent_th_44_Template","SensorsDataTableComponent_td_45_Template","SensorsDataTableComponent_tr_46_Template","SensorsDataTableComponent_tr_47_Template","environment","DELETE_PATIENT_DATA","GET_SENSOR_LIST","device_uuid","GET_RAW_DATARECORDS_URL","GET_DATARECORDS","BASE_URL","backend_url","POST_DEVICE_DATA","factory","ɵfac","providedIn","heightUnits","weightUnits","HttpHeaders","throwError","catchError","http","session","ResponseContentType","Json","JsonHeader","Xml","token","authHeader","url","validacion","headers","httpOptions","responseType","handleError","post","put","delete","ErrorEvent","status","Error","ɵɵinject","HttpClient","RxStomp","myRxStompConfig","brokerURL","backend_ws","connectHeaders","login","passcode","heartbeatIncoming","heartbeatOutgoing","reconnectDelay","debug","msg","Date","rxStomp","configure","activate","deactivate","Subject","BehaviorSubject","SessionMngr","deviceObserver","asObservable","sessview","sessviewObserver","_queryMode","box","sessionStorage","getItem","rawData","atob","encoder","TextEncoder","ActiveDevice","val","clear","encoded","btoa","setItem","observerForActiveDevice","sessionExist","setQueryMode","unsetQueryMode","sessionMngr","_router","navigate","outlets","primary","Router","production","testing","__NgCli_bootstrap_1","platformBrowser","bootstrapModule","catch"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}